//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Idea.Entities;

namespace Idea.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IdeaContext : DbContext
    {
        public IdeaContext()
            : base("name=IdeaContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Factor> Factors { get; set; }
        public virtual DbSet<Marker> Markers { get; set; }
        public virtual DbSet<MarkerType> MarkerTypes { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<ModelFactor> ModelFactors { get; set; }
        public virtual DbSet<ModelFactorData> ModelFactorDatas { get; set; }
        public virtual DbSet<ModelRiskAlert> ModelRiskAlerts { get; set; }
        public virtual DbSet<ModelRiskAlertAttachment> ModelRiskAlertAttachments { get; set; }
        public virtual DbSet<ModelRiskAlertPhase> ModelRiskAlertPhases { get; set; }
        public virtual DbSet<ModelRiskAlertRegion> ModelRiskAlertRegions { get; set; }
        public virtual DbSet<Phase> Phases { get; set; }
        public virtual DbSet<PhaseBullet> PhaseBullets { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SystemParameter> SystemParameters { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<spModelRiskAlert_GetWithFilter_Result> spModelRiskAlert_GetWithFilter(Nullable<int> idModel, string idRegions, Nullable<bool> active)
        {
            var idModelParameter = idModel.HasValue ?
                new ObjectParameter("IdModel", idModel) :
                new ObjectParameter("IdModel", typeof(int));
    
            var idRegionsParameter = idRegions != null ?
                new ObjectParameter("IdRegions", idRegions) :
                new ObjectParameter("IdRegions", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spModelRiskAlert_GetWithFilter_Result>("spModelRiskAlert_GetWithFilter", idModelParameter, idRegionsParameter, activeParameter);
        }
    
        public virtual ObjectResult<spModelFactorData_GetMapData_Result> spModelFactorData_GetMapData(Nullable<int> iDModelFactor, string regions, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var iDModelFactorParameter = iDModelFactor.HasValue ?
                new ObjectParameter("IDModelFactor", iDModelFactor) :
                new ObjectParameter("IDModelFactor", typeof(int));
    
            var regionsParameter = regions != null ?
                new ObjectParameter("Regions", regions) :
                new ObjectParameter("Regions", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spModelFactorData_GetMapData_Result>("spModelFactorData_GetMapData", iDModelFactorParameter, regionsParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<string> spGetFeatureIDsToExclude(Nullable<int> iDRegion)
        {
            var iDRegionParameter = iDRegion.HasValue ?
                new ObjectParameter("IDRegion", iDRegion) :
                new ObjectParameter("IDRegion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetFeatureIDsToExclude", iDRegionParameter);
        }
    }
}
