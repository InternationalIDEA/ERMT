<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DesktopEdition</name>
    </assembly>
    <members>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.WpfMap">
            <summary>The Map Control used to develop a WPF application.</summary>
            <remarks>
            	<para>It is very important that the property <strong>MapUnit</strong> is set
                properly according to the unit of the data (Layers) represented in it. The
                <strong>MapUnit</strong> will allow the scale, distance and area calulations to
                work properly. In the vast majority of cases, the MapUnit will be DecimalDegrees,
                Meters or Feet, the default <strong>MapUnit</strong> is DecimalDegrees. A Map has an
                <strong>Overlays</strong> property to set a group of <strong>Overlays</strong> (which can
                be thought of as a group of data), or you can have your own overlays if you want
                customize the overlays. To refresh the entire map, use the <strong>Refresh</strong>
                method. To refresh only one particular Overlay, use the <strong>Redraw</strong> method.
                There are two ways to control the Map: One way is to react to the user's mouse and
                keboard (i.e., Shift when TrackZoomIn) actions, and the other way is to use the API provided by
                the Map Control to change the <strong>CurrentExtent</strong> and then
                <strong>Rsefresh or Redraw</strong> the Map.</para>
            </remarks>
            <example>
            	<code lang="CS" title="C# sample">
            		<![CDATA[
            wpfMap1.MapUnit = GeographyUnit.DecimalDegree;
            wpfMap1.MapBackground.BackgroundLayer = new BackgroundLayer(new GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean));
             
            ShapeFileFeatureLayer worldLayer = new ShapeFileFeatureLayer(@"..\..\SampleData\Data\Countries02.shp");
            worldLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = AreaStyles.Country1;
            worldLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;
             
            LayerOverlay staticOverlay = new LayerOverlay();
            staticOverlay.Layers.Add("WorldLayer", worldLayer);
            wpfMap1.Overlays.Add(staticOverlay);
             
            wpfMap1.CurrentExtent = new RectangleShape(-143.4, 109.3, 116.7, -76.3);
             
            wpfMap1.Refresh();]]>
            	</code>
            	<code lang="VB">
            		<![CDATA[
            wpfMap1.MapUnit = GeographyUnit.DecimalDegree
            wpfMap1.MapBackground.BackgroundLayer = New BackgroundLayer(New GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean))
             
            Dim worldLayer As New ShapeFileFeatureLayer("..\..\SampleData\Data\Countries02.shp")
            worldLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = AreaStyles.Country1
            worldLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20
             
            Dim staticOverlay As New LayerOverlay()
            staticOverlay.Layers.Add("WorldLayer", worldLayer)
            wpfMap1.Overlays.Add(staticOverlay)
             
            wpfMap1.CurrentExtent = New RectangleShape(-143.4, 109.3, 116.7, -76.3)
             
            wpfMap1.Refresh()]]>
            	</code>
            </example>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.#ctor">
            <summary>Constructor of WPF MapControl.</summary>
            <remarks>In this constructor, we will initilize some class modular variables and hook up some events.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnMapClick(ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs)">
            <summary>
            This event is raised when clicking on the map without any mouse movement (dragging).
            </summary>
            <param name="e">The WinformsMapClickEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnOverlaysDrawing(ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs)">
            <summary>
            This event will be fired before the Overlays are drawn.
            </summary>
            <param name="e">The OverlaysDrawingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnOverlaysDrawn(ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs)">
            <summary>
            This event will be fired after the Overlays have been drawn.
            </summary>
            <param name="e">The OverlaysDrawingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnOverlayDrawing(ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs)">
            <summary>
            This event will be fired before the Overlay is drawn.
            </summary>
            <param name="e">The OverlayDrawingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnOverlayDrawn(ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWpfMapEventArgs)">
            <summary>
            This event will be fired after the Overlay has been drawn.
            </summary>
            <param name="e">The OverlayDrawingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnCurrentScaleChanged(ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs)">
            <summary>
            Raised when the CurrentScale of the map changes.
            </summary>
            <param name="e">The CurrentScaleChangedEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnCurrentExtentChanged(ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs)">
            <summary>
            Raised when the CurrentExtent of the map changes.
            </summary>
            <param name="e">The CurrentExtentChangedEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnCurrentScaleChanging(ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs)">
            <summary>
            Raised before the CurrentScale of the map changes.
            </summary>
            <param name="e">The CurrentScaleChangingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnCurrentExtentChanging(ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs)">
            <summary>
            Raised before the CurrentExtent of the map changes.
            </summary>
            <param name="e">The CurrentExtentChangingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomIn(System.Int32)">
            <summary>
            This method will zoom in the currentExtent by the percentage provided.
            </summary>
            <returns>
            None
            </returns>
            <remarks>None</remarks>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.Feature)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in and the centerFeature you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="centerFeature">This parameter is the feature you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in and the worldPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="worldPoint">This parameter is the world point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,System.Single,System.Single)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in, as well as the screenPointX and screenPointY you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="screenX">This parameter is the screen X you want to center on.</param>
            <param name="screenY">This parameter is the screen Y you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in and the screenPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="screenPoint">This parameter is the screen point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomOut(System.Int32)">
            <summary>
            This method will zoom out the currentExtent by the percentage provided.
            </summary>
            <returns>
            None
            </returns>
            <remarks>None</remarks>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.Feature)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out and the centerFeature you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="centerFeature">This parameter is the feature you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out and the worldPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="worldPoint">This parameter is the world point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,System.Single,System.Single)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out, as well as the screenPointX and screenPointY you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="screenX">This parameter is the screen X you want to center on.</param>
            <param name="screenY">This parameter is the screen Y you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out and the screenPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="screenPoint">This parameter is the screen point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomToScale(System.Double)">
            <summary>This method will zoom the currentExtent to the targetScale.</summary>
            <remarks>None</remarks>
            <param name="targetScale">This parameter is the scale you want to zoom to.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomToScale(System.Double,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This method will zoom the currentExtent to the new TargetScale with a given offset Screen Point.</summary>
            <remarks>None</remarks>
            <param name="targetScale">This parameter is the scale you want to zoom to.</param>
            <param name="offsetScreenPoint">This parameter is the offset Screen Point.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomToScale(System.Double,System.Single,System.Single)">
            <summary>This method will zoom the currentExtent to the new TargetScale with a given offset in screen coordinates.</summary>
            <remarks>None</remarks>
            <param name="targetScale">This parameter is the scale you want to zoom to.</param>
            <param name="offsetScreenX">This parameter is the offsetScreen X.</param>
            <param name="offsetScreenY">This parameter is the offsetScreen Y.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Pan(System.Single,System.Int32)">
            <summary>This function will pan the currentExtent based on an angle and percentage.</summary>
            <overloads>This overload allows you to pass in an angle and a percentage by which you want to
            pan.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by panning according to the angle and percentage specified.</remarks>
            <param name="degree">This parameter is the degree (angle) in which you want to pan.</param>
            <param name="percentage">This parameter is the percentage by which you want to pan.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">
            This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.
            </exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Pan(ThinkGeo.MapSuite.Core.PanDirection,System.Int32)">
            <summary>This function will pan the currentExtent based on a direction and percentage.</summary>
            <overloads>This overload allows you to pass a degree and percentage.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by panning according to the direction and percentage specified.</remarks>
            <param name="panDirection">This parameter is the direction in which you want to pan.</param>
            <param name="percentage">This parameter is the percentage by which you want to pan.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CenterAt(ThinkGeo.MapSuite.Core.Feature)">
            <summary>This function will center the currentExtent based on the specified center feature.</summary>
            <overloads>This overload allows you to pass in a feature as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the target centerFeature.</remarks>
            <param name="centerFeature">This parameter is the feature you want to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CenterAt(System.Single,System.Single)">
            <summary>This function will center the currentExtent based on the specified screenX and screenY.</summary>
            <overloads>This overload allows you to pass in a world point as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the screenX and screenY coordinates you provide.</remarks>
            <param name="screenX">This parameter is the screen X coordinate to center on.</param>
            <param name="screenY">This parameter is the screen Y coordinate to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CenterAt(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>This function will center the currentExtent on the specified worldPoint.</summary>
            <overloads>This overload allows you to pass in a world pointShape as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the worldPoint you provide.</remarks>
            <param name="worldPoint">This parameter is the world point you want to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CenterAt(ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This function will center the currentExtent based on the specified screenPoint.</summary>
            <overloads>This overload allows you to pass in a screen point as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the screenPoint you provide.</remarks>
            <param name="screenPoint">This parameter is the screen point you want to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.GetVersion">
            <summary>
            This static method will be useful when you want to report a bug in a specified
            version of Map Suite. You can use it to tell ThinkGeo support which version you are trying to
            use.
            </summary>
            <returns>
            A string representing the version of the MapSuiteCore and Map Suite Desktop product that you are now
            using.
            </returns>
            <example>
            	<code lang="CS" title="C# sample" description="This code shows how to use this API to get the version of the Map Suite product you are using now.">
            string version = WpfMap.GetVersion();
            </code>
            	<code lang="VB" title="VB sample" description="This code shows how to use this API to get the version of the Map Suite product you are using now.">
            Dim version As String = WpfMap.GetVersion()
            </code>
            </example>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.FindFeatureLayer(System.String)">
            <summary>
            This method will search all overlays for a feature layer that has a given layer key.
            </summary>
            <returns>FeatureLayer with the specified key, or Null if nothing was found.</returns>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <exception cref="T:System.ArgumentNullException" caption="AugumentNullException">This exception will be thrown if you pass in Null as key of the target FeatureLayer.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">This exception will be thrown if you pass in string.empty as the key of the target FeatureLayer.</exception>
            <param name="key">This parameter specifies the key for the returning feature layer.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.FindRasterLayer(System.String)">
            <summary>
            This method will search all overlays for a raster layer that has a given layer key.
            </summary>
            <returns>RasterLayer with the specified key, or Null if nothing was found.</returns>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <exception cref="T:System.ArgumentNullException" caption="AugumentNullException">This exception will be thrown if you pass in Null as key of the target RasterLayer.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">This exception will be thrown if you pass in string.empty as the key of the target RasterLayer.</exception>
            <param name="key">This parameter specifies the key for the returning raster layer.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomToPreviousExtent">
            <summary>Reverts the MapControl to the previous extent.</summary>
            <remarks>
            The MapControl keeps track of all of its previous extents so you can go back one (or
            more) any time you want.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ToggleMapExtents">
            <summary>
            Switch the MapControl's <strong>CurrentExtent</strong> between the current and
            previous extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Refresh">
            <summary>
            This API will refresh all of the overlays. This overload's logic is slightly different from
            other overloads in that it will clear the screen bitmaps and will not delete the tiles if they
            already exist.
            
            If you only want to refresh certain specified overlays, please use the other overloads and pass them into it.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Refresh(ThinkGeo.MapSuite.DesktopEdition.Overlay)">
            <summary>
            This API will refresh only one specified overlay. This overload has the same logic as the overloads that
            accept a group of overlays, but is different from overloads that do not accept parameters.
            
            It will delete any tiles that already exist for the specified overlay and will
            keep the screen bitmaps for other overlays.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Refresh(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay})">
            <summary>
            This API will refresh only the specified overlays. This overload has the same logic as the overloads that
            accept a single specified overlay, but is different from overloads that do not accept parameters.
            
            It will delete any tiles that already exist for the specified overlays and will
            keep the screen bitmaps for other overlays.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Overrides the OnRender function in the Canvas which the WpfMap Control inherits from.
            </summary>
            <param name="dc">The DrawingContext on which the BitmapSource is to be drawn.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Finalize">
            <summary>
            The deserializer of the WpfMap Control.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Dispose">
            <summary>
            Releases all resources used by the MapControl.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Dispose(System.Boolean)">
            <summary>
             Releases the unmanaged resources used by the Map Control
             and its child controls.  Optionally, releases the managed resources as well.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only
                unmanaged resources.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.MapClick">
            <summary>This event will be fired when you click on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OverlaysDrawing">
            <summary>This event will be fired before all overlays are drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OverlaysDrawn">
            <summary>This event will be fired after all overlays are drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OverlayDrawing">
            <summary>This event will be fired before an overlay is drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.OverlayDrawn">
            <summary>This event will be fired after an overlay is drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentExtentChanging">
            <summary>This event will be raised before the CurrentExtent of the Map changes.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentExtentChanged">
            <summary>This event will be raised after the CurrentExtent of the Map changes.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentScaleChanged">
            <summary>This event will be raised after the CurrentScale of the Map changes.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentScaleChanging">
            <summary>This event will be raised before the CurrentScale of the Map changes.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.BackgroundOverlay">
            <summary>This property gets or sets the background overlay.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to use the backgroundOverlay.">
            wpfMap1.BackgroundOverlay.BackgroundBrush = new GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to use the backgroundOverlay.">
            wpfMap1.BackgroundOverlay.BackgroundBrush = New GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.AdornmentOverlay">
            <summary>This property gets or sets the adornment overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to add a ScaleLine adornmentlayer to the MapControl.">
            ScaleLineAdornmentLayer scaleLineAdornmentLayer = new ScaleLineAdornmentLayer();
            wpfMap1.AdornmentOverlay.Layers.Add("ScaleLineAdornmentLayer", scaleLineAdornmentLayer);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to add a ScaleLine adornmentlayer to the MapControl.">
            Dim scaleLineAdornmentLayer As New ScaleLineAdornmentLayer()
            wpfMap1.AdornmentOverlay.Layers.Add("ScaleLineAdornmentLayer", scaleLineAdornmentLayer)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.EditOverlay">
            <summary>This property gets or sets the edit overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows you one way to delete the single last shape in the EditShapsLayer contained in EditOverlay.">
            	case "btnTrackDelete":
            	        int lastIndex = wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.Count - 1;
            	        if (lastIndex &gt;= 0)
            	        {
            	            wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.RemoveAt(lastIndex);
            	            wpfMap1.EditOverlay.CalculateAllControlPoints();
            	        }
            	        wpfMap1.Refresh(wpfMap1.EditOverlay);
            	        break;
                </code>
            	<code lang="VB" title="VB Sample" description="This code shows you one way to delete the single last shape in the EditShapsLayer contained in EditOverlay.">
                Case "btnTrackDelete"
                        Dim lastIndex As Integer = wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.Count - 1
                        If (lastIndex &gt;= 0) Then
                            wpfMap1.EditOverlay.EditShapesLayer.InternalFeatures.RemoveAt(lastIndex)
                            wpfMap1.EditOverlay.CalculateAllControlPoints()
                        End If
                        wpfMap1.Refresh(wpfMap1.EditOverlay)
                        Exit Select
                </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.TrackOverlay">
            <summary>This property gets or sets the track overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to change the TrackMode of the MapControl to Track an ellipse out.">
             wpfMap1.TrackOverlay.TrackMode = TrackMode.Ellipse;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to change the TrackMode of the MapControl to Track an ellipse out.">
             wpfMap1.TrackOverlay.TrackMode = TrackMode.Ellipse
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ExtentOverlay">
            <summary>This property gets or sets the extent overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.InteractiveOverlays">
            <summary>This property gets the collection of InteractiveOverlays in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <remarks>This property is used when you want to change the default behavior of the InteractiveOverlay or add your own
            customized InteractiveOverlay.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.Overlays">
            <summary>This property gets the collection of Overlays in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to add an overlay to the Overlays collection.">
             LayerOverlay staticOverlay = new LayerOverlay();
             staticOverlay.Layers.Add("WorldLayer", worldLayer);
             wpfMap1.Overlays.Add("WorldOverlay", staticOverlay);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to add an overlay to the Overlays collection.">
             Dim staticOverlay As New LayerOverlay()
             staticOverlay.Layers.Add("WorldLayer", worldLayer)
             wpfMap1.Overlays.Add(staticOverlay)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.MapUnit">
            <summary>This property gets or sets the map unit used by the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to set the MapUnit.">
             wpfMap1.MapUnit = GeographyUnit.Meter;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to set the MapUnit.">
             wpfMap1.MapUnit = GeographyUnit.Meter 
            </code>
            </example>
            <remarks>The MapUnit reflects the data unit.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.MapFocusMode">
            <summary>
            This property gets or sets the <strong>MapFocusMode</strong> for the MapControl
            when dealing with the issue of the map taking focus.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomLevelSnapping">
            <summary>This property gets or sets the ZoomLevelSnappingMode in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WpfMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to set the ZoomLevelSnappingMode.">
             wpfMap1.ZoomLevelSnappingMode = ZoomLevelSnappingMode.SnapUp;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to set the ZoomLevelSnappingMode.">
             wpfMap1.ZoomLevelSnappingMode = ZoomLevelSnappingMode.SnapUp 
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentScale">
            <summary>Gets or sets the current scale of the MapControl.</summary>
            <remarks>
            When you set the scale, the <strong>CurrentExtent</strong> will change, but the
            center of the <strong>CurrentExtent</strong> stays the same.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentExtent">
            <summary>
            Gets or sets the current extent of the MapControl.
            </summary>
            <remarks>The current extent stands for the extent of current position, this is 
            very important metrics to caculate the scale.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ZoomLevelSet">
            <summary>
            This property gets or sets the <strong>ZoomLevelSet</strong> used for the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.MapResizeMode">
            <summary>
            This property gets or sets the <strong>MapResizeMode</strong> to be used
            when resizing the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.MinimumScale">
            <summary>
            This property gets or sets the MinimumScale your MapControl can zoom into when 
            your ZoomLevelSnappingMode is set to None.
            </summary>
            <remarks>If your ZoomLevelSnappingMode is set to either Default or SnapUp, the minimum scale 
            you can zoom into will always be the minimum level from the 20 preset scales.  If the
            MinimumScale value you set here is larger than the smallest scale available in the preset
            scales, the next preset that is larger than your MinimumScale will be chosen.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.MaximumScale">
            <summary>
            This property will gets or sets the MaximumScale your MapControl can zoom out to when 
            your ZoomLevelSnappingMode is set to None.
            </summary>
            <remarks>If your ZoomLevelSnappingMode is set to Default or SnapUp, the maximum scale 
            you can zoom out to will always be the maximum level from the 20 preset scales.  If the
            MaximumScale value you set here is larger than the largest scale available in the preset
            scales, the next preset that is smaller than your MaximumScale will be chosen.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WpfMap.ThreadingMode">
            <summary>
            This property gets or sets the ThreadingMode used in the MapControl.
            </summary>
            <remarks> 
            Currently, we provide two different ThreadingModes: single-threaded mode and multi-threaded mode.
            The major difference for multi-threaded mode is that the drawing logic for overlays is done in another thread
            instead of the main thread.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelMode">
            <summary>
            This enumeration specifies the behavior that occurs when the mouse wheel is scrolled.
            The default value is Zooming.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelMode.Default">
            <summary>
            Default value (Zooming) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelMode.Zooming">
            <summary>
            This enumeration item means that the map will ZoomIn or ZoomOut when the mouse wheel is scrolled up or down, respectively.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelMode.Disabled">
            <summary>
            This enumeration item means that the mouse wheel will be disabled and will have no effect on the MapControl.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel">
            <summary>
            This class defines styles of markers and a zoomlevel range. When the current
            zoomlevel is in that range, the styles will be applied to the markers.
            </summary>
            <remarks>
            This class defines how features will be marked based on its scale. Inside of the
            ZoomLevelSet there are a number of marker zoomlevels. We will determine which
            MarkerZoomLevel to use based on which one has the Scale property closest to the current
            scale. The matching one will define the styles that will be used to mark the features
            on the map.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel.#ctor">
            <summary>Constructor of <strong>MarkerZoomLevel</strong> class.</summary>
            <remarks>This is the constructor of <strong>MarkerZoomLevel</strong> class.</remarks>
            <returns>An instance of the <strong>MarkerZoomLevel</strong> class.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel.GetMarkers(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Feature})">
            <summary>
            This method returns a collection of markers that is applied with the styles when
            the current zoomlevel falls into the ranges that defined.
            </summary>
            <returns>A Collection of markers that created from the feature collection.</returns>
            <remarks>
            This method returns a collection of markers that is applied with the styles when
            the current zoomlevel falls into the ranges that defined.
            </remarks>
            <param name="features">
            A collection of features that is applied with the styles when the current
            zoomlevel falls into the ranges that defined.
            </param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel.IsStyleDefined">
            <summary>
            Gets whether the style is defined.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel.ApplyUntilZoomLevel">
            <summary>Gets or sets the zoomlevel to which the styles will be applied.</summary>
            <value>A zoomlevel to which the styles will be applied.</value>
            <remarks>Gets or sets the zoomlevel to which the styles will be applied.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel.DefaultPointMarkerStyle">
            <summary>
            Gets default style that is applied to the markers if the
            CustomMarkerStyle is not defined.
            </summary>
            <remarks>
            Gets the style that is applied to the markers if the CustomMarkerStyle is
            not defined.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevel.CustomMarkerStyle">
            <summary>Gets or sets a custom style that can be any type of MarkerStyle.</summary>
            <value>
            MarkerStyle object that will be applied to the markers with higher
            priority.
            </value>
            <remarks>
            The CustomMarkerStyle has a higher priority than the DefaultMarkerStyle. When you
            define both styles, the CustomMarkerStyle will be applied. The CustomMarkerStyle can be
            any kind of MarkStyle while DefaultMarkerStyle can not.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay">
            <summary>
            This class inherits from the interactiveOverlay abstract class.  This specified overlay describes the
            TrackShape interactive process with the MapControl using the Mouse or Keyborad.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay">
            <summary>
            This class inherits from Overlay abstract class. This specified overlay describes the interative
            process with the MapControl using the Mouse or Keyboard.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.Overlay">
            <summary>
            Serves as the base class that defines the properties and methods shared by all
            types of overlays.
            </summary>
            <remarks>
            	<para>The <strong>Overlay</strong> has a similar concept to that of the Layer. 
                Different types of overlays stack over each other to form a map.</para>
            	<para>Usually, an overlay represents an image with a transparent background that is
                laid upon other overlay, such as a <strong>LayerOverlay</strong> or
                <strong>WmsOverlay</strong>.</para>
            	<para>There are basically two kinds of overlays: base overlays and non-base
                overlays.</para>
            	<para>A base overlay has its <strong>IsBase</strong> property set to true.
                It is displayed as the background image of the map.</para>
            	<para>A non-base overlay has a false <strong>IsBase</strong> property.
                These overlays can overlap the base overlay and/or each other.</para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.#ctor">
            <summary>Initialize an instance of the Overlay class.</summary>
            <overloads>Initialize an instance of the Overlay class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.OnDrawing(ThinkGeo.MapSuite.DesktopEdition.DrawingOverlayEventArgs)">
            <summary>
            This event will be fired before <strong>Overlay</strong> is drawn.
            </summary>
            <param name="e">The OverlayDrawingEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.OnDrawn(ThinkGeo.MapSuite.DesktopEdition.DrawnOverlayEventArgs)">
            <summary>
            This event will be fired after <strong>Overlay</strong> is drawn.
            </summary>
            <param name="e">The OverlayDrawnEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawPreview(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method will be used to draw preview tiles to the canvas.
            </summary>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
            <returns>The tile existing type, which indicates whether any tiles exist.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawPreviewCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This is the core method of DrawPreview which is intended to be overridden by its concrete
            sub class.
            </summary>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
            <returns>The tile existing type, which indicates whether any tiles exist.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.Draw(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the Overlay.</summary>
            <returns>None</returns>
            <remarks>
            	<para>This method is the concrete wrapper for the abstract method DrawCore. This
                method draws the representation of the overlay based on the extent you provided.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the canvas, we will throw an ArgumentNullException.</exception>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawException(ThinkGeo.MapSuite.Core.GeoCanvas,System.Exception)">
            <summary>
            This method will draw on the canvas when an exception occurs during the drawing process.
            </summary>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
            <param name="e">This parameter is the exception that is occurring.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawExceptionCore(ThinkGeo.MapSuite.Core.GeoCanvas,System.Exception)">
            <summary>
            This method is the Core method of DrawException, which can be overridden if you want to change its logic.
            This method will draw on the canvas when an exception occurs during drawing process.
            </summary>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
            <param name="e">This parameter is the exception that is occurring.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the Overlay.</summary>
            <remarks>
            This method is the concrete wrapper for the abstract method DrawCore. This
                method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.Lock">
            <summary>
            This property gets the OverlayLock object.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.IsBase">
            <summary>Gets or sets a value that indicates whether the overlay is a base overlay. The default value is false.</summary>
            <value>
            	<strong>true</strong> if the overlay is a base overlay, otherwise
            <strong>false</strong>.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawingExceptionMode">
            <summary>
            This property gets and sets the DrawingExceptionMode used when an exception occurs during drawing.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.Overlay.Drawing">
            <summary>This event will be fired before the <strong>Overlay</strong> is drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.Overlay.Drawn">
            <summary>This event will be fired after the <strong>Overlay</strong> is drawn.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.IsVisible">
            <summary>
            Gets or sets a value that indicates whether the overlay is visible on the
            map.
            </summary>
            <value>
            	<strong>true</strong> if the overlay is visible, otherwise
            <strong>false</strong>.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.Name">
            <summary>
            Gets or sets the name of the overlay, which can be used to represent a specific overlay.
            </summary>
            <value>The name string of the overlay object.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.TileCache">
            <summary>This property gets or sets the TileCache used for the overlay.</summary>
            <value>Returns the TileCache used for the overlay.</value>
            <remarks>
            The TileCache system is always used for better performance, especially in the case
            where your application tiles can be pregenerated.
            </remarks>
            <example>
            	<code lang="CS" title="C# sample" description="This code snippet shows you how to set a specified tile cache for the Overlay.">
            		<![CDATA[
            LayerOverlay staticOverlay = new LayerOverlay();
            staticOverlay.Layers.Add("WorldLayer", worldLayer);
            staticOverlay.TileCache = new FileBitmapTileCache(@"C:\temp", "WorldOverlayTileCache");]]>
            	</code>
            	<code lang="VB" title="VB sample" description="This code snippet shows you how to set a specified tile cache for the Overlay.">
            		<![CDATA[
            Dim staticOverlay As New LayerOverlay()
            staticOverlay.Layers.Add("WorldLayer", worldLayer)
            staticOverlay.TileCache = New FileBitmapTileCache("C:\temp", "WorldOverlayTileCache")]]>
            	</code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.PreviewTileCache">
            <summary>
            This property gets or sets the preview tile cache system. In order for this system to work,
            you must be in multi-threaded mode and have the tile cache set.
            </summary>
            <value>Returns tile caches used for preview.</value>
            <example>
            	<code lang="CS" title="C# sample" description="This code snippet shows you how to set a specified tile cache for previewTileCache in the Overlay.">
            		<![CDATA[
            winformsMap1.ThreadingMode = MapThreadingMode.Multithreaded;
             
            LayerOverlay staticOverlay = new LayerOverlay();
            staticOverlay.Layers.Add("WorldLayer", worldLayer);
            staticOverlay.TileCache = new FileBitmapTileCache(@"C:\temp", "WorldOverlayTileCache");
            staticOverlay.PreviewTileCache = new FileBitmapTileCache(@"C:\temp", "WorldOverlayPreviewCache");]]>
            	</code>
            	<code lang="VB" title="VB sample" description="This code snippet shows you how to set a specified tile cache for preview in the Overlay.">
            		<![CDATA[
            winformsMap1.ThreadingMode = MapThreadingMode.Multithreaded
            Dim staticOverlay As New LayerOverlay()
            staticOverlay.Layers.Add("WorldLayer", worldLayer)
            staticOverlay.TileCache = New FileBitmapTileCache("C:\temp", "WorldOverlayTileCache")
            staticOverlay.PreviewTileCache = New FileBitmapTileCache("C:\temp", "WorldOverlayPreviewCache")]]>
            	</code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.IsEmpty">
            <summary>
            This property can be overridden by its base class.  If it is not overridden, its default return value will be false.
            
            If this property is empty, we can skip drawing to achieve better performance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Overlay.DrawingTime">
            <summary>This property gets the last drawing time for the Overlay.</summary>
            <value>This property gets the last drawing time for the Overlay.</value>
            <remarks>
            We track the drawing time for the Overlay and report it back in this method. This
            is useful to determine the speed of various Overlays.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.#ctor">
            <summary>
            Default constructor of this abstract class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.KeyDown(ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments)">
            <summary>This method will simulate the KeyDown interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.KeyDownCore(ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments)">
            <summary>This protected virtual method is the Core method of KeyDown API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.KeyUp(ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments)">
            <summary>This method will simulate the KeyUp interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.KeyUpCore(ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments)">
            <summary>This protected virtual method is the Core method of KeyDown API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseDown(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseDown interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of MouseDown API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseMove(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseMove interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of the MouseMove API.</summary>
            <returns>Interaction results of this method.</returns>a
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseUp(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseUp interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of the MouseUp API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseClick(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseClick interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of the MouseClick API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseDoubleClick(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseDoubleClick interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of the MouseDoubleClick API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseWheel(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This method will simulate the MouseWheel interaction.</summary>
            <returns>Interaction results of this method.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for its virtual Core method. <br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MouseWheelCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This protected virtual method is the Core method of the MouseWheel API.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapMouseDown(ThinkGeo.MapSuite.DesktopEdition.MapMouseDownInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseDown</strong> is called.
            </summary>
            <param name="e">The MapMouseDownInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapMouseMove(ThinkGeo.MapSuite.DesktopEdition.MapMouseMoveInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseMove</strong> is called.
            </summary>
            <param name="e">The MapMouseMoveInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapMouseUp(ThinkGeo.MapSuite.DesktopEdition.MapMouseUpInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseUp</strong> is called.
            </summary>
            <param name="e">The MapMouseUpInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapMouseClick(ThinkGeo.MapSuite.DesktopEdition.MapMouseClickInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseClick</strong> is called.
            </summary>
            <param name="e">The MapMouseClickInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapMouseDoubleClick(ThinkGeo.MapSuite.DesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseDoubleClick</strong> is called.
            </summary>
            <param name="e">The MapMouseDoubleClickInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapMouseWheel(ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapMouseWheel</strong> is called.
            </summary>
            <param name="e">The MapMouseWheelInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapKeyDown(ThinkGeo.MapSuite.DesktopEdition.MapKeyDownInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapKeyDown</strong> is called.
            </summary>
            <param name="e">The MapKeyDownInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.OnMapKeyUp(ThinkGeo.MapSuite.DesktopEdition.MapKeyUpInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when <strong>MapKeyUp</strong> is called.
            </summary>
            <param name="e">The MapKeyUpInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method draws the InterativeInterativeOverlay abstract class.
            You must override this API in its sub concrete classes, or it will throw a
            NotImplementedException.
            </summary>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseDown">
            <summary>This event will be fired when the Mouse button is pressed (down) on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseMove">
            <summary>This event will be fired when the Mouse is moved on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseUp">
            <summary>This event will be fired when the Mouse button is released (up) on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseClick">
            <summary>This event will be fired when the Mouse button is clicked (mouse up and mouse down in the same postion) on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseDoubleClick">
            <summary>This event will be fired when the Mouse button is double-clicked on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseWheel">
            <summary>This event will be fired when the Mouse wheel is scrolled while the cursor is over the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapKeyDown">
            <summary>This event will be fired when the key is pressed down when focusing on the Map.</summary>
            <example>
            	<code lang="CS" title="C# Winforms Sample" description="This code snippet shows how to use MapKeyDown event for WinformsMap.">
            		<![CDATA[
            winformsMap1.ExtentOverlay.MapKeyDown += new EventHandler<MapKeyDownInteractiveOverlayEventArgs>(ExtentOverlay_MapKeyDown);
             
            void ExtentOverlay_MapKeyDown(object sender, MapKeyDownInteractiveOverlayEventArgs e)
            {
                string key = e.InteractionArguments.Key;
                System.Diagnostics.Debug.WriteLine(key + " key is down.");
            }]]>
            	</code>
            	<code lang="CS" title="C# Wpf Sample" description="This code snippet shows how to use MapKeyDown event for WpfMap.">
            		<![CDATA[
            wpfMap1.ExtentOverlay.MapKeyDown += new EventHandler<MapKeyDownInteractiveOverlayEventArgs>(ExtentOverlay_MapKeyDown);
             
            void ExtentOverlay_MapKeyDown(object sender, MapKeyDownInteractiveOverlayEventArgs e)
            {
                string key = e.InteractionArguments.Key;
                System.Diagnostics.Debug.WriteLine(key + " key is down.");
            }]]>
            	</code>
            	<code lang="VB" title="VB Winforms Sample" description="This code snippet shows how to use MapKeyDown event for WinformsMap.">
            		<![CDATA[
            AddHandler winformsMap1.ExtentOverlay.MapKeyDown, AddressOf ExtentOverlay_MapKeyDown
             
            Private Sub ExtentOverlay_MapKeyDown(ByVal sender As Object, ByVal e As MapKeyDownInteractiveOverlayEventArgs)
                Dim key As String = e.InteractionArguments.Key
                System.Diagnostics.Debug.WriteLine(key & " key is down.")
            End Sub]]>
            	</code>
            	<code lang="VB" title="VB Wpf Sample" description="This code snippet shows how to use MapKeyDown event for WpfMap.">
            		<![CDATA[
            AddHandler wpfMap1.ExtentOverlay.MapKeyDown, AddressOf ExtentOverlay_MapKeyDown
             
            Private Sub ExtentOverlay_MapKeyDown(ByVal sender As Object, ByVal e As MapKeyDownInteractiveOverlayEventArgs)
                Dim key As String = e.InteractionArguments.Key
                System.Diagnostics.Debug.WriteLine(key & " key is down.")
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapKeyUp">
            <summary>This event will be fired when the key is released up when focusing on the Map.</summary>
            <example>
            	<code lang="CS" title="C# Winforms Sample" description="This code snippet shows how to use MapKeyUp event for WinformsMap.">
            		<![CDATA[
            winformsMap1.ExtentOverlay.MapKeyUp += new EventHandler<MapKeyUpInteractiveOverlayEventArgs>(ExtentOverlay_MapKeyUp);
             
            void ExtentOverlay_MapKeyUp(object sender, MapKeyUpInteractiveOverlayEventArgs e)
            {
                string key = e.InteractionArguments.Key;
                System.Diagnostics.Debug.WriteLine(key + " key is Up.");
            }]]>
            	</code>
            	<code lang="CS" title="C# Wpf Sample" description="This code snippet shows how to use MapKeyUp event for WpfMap.">
            		<![CDATA[
            wpfMap1.ExtentOverlay.MapKeyUp += new EventHandler<MapKeyUpInteractiveOverlayEventArgs>(ExtentOverlay_MapKeyUp);
             
            void ExtentOverlay_MapKeyUp(object sender, MapKeyUpInteractiveOverlayEventArgs e)
            {
                string key = e.InteractionArguments.Key;
                System.Diagnostics.Debug.WriteLine(key + " key is Up.");
            }]]>
            	</code>
            	<code lang="VB" title="VB Winforms Sample" description="This code snippet shows how to use MapKeyUp event for WinformsMap.">
            		<![CDATA[
            AddHandler winformsMap1.ExtentOverlay.MapKeyUp, AddressOf ExtentOverlay_MapKeyUp
             
            Private Sub ExtentOverlay_MapKeyUp(ByVal sender As Object, ByVal e As MapKeyUpInteractiveOverlayEventArgs)
                Dim key As String = e.InteractionArguments.Key
                System.Diagnostics.Debug.WriteLine(key & " key is Up.")
            End Sub]]>
            	</code>
            	<code lang="VB" title="VB Wpf Sample" description="This code snippet shows how to use MapKeyUp event for WpfMap.">
            		<![CDATA[
            AddHandler wpfMap1.ExtentOverlay.MapKeyUp, AddressOf ExtentOverlay_MapKeyUp
             
            Private Sub ExtentOverlay_MapKeyUp(ByVal sender As Object, ByVal e As MapKeyUpInteractiveOverlayEventArgs)
                Dim key As String = e.InteractionArguments.Key
                System.Diagnostics.Debug.WriteLine(key & " key is Up.")
            End Sub]]>
            	</code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.InteractiveClickInterval">
            <summary>
            This is a static property gets or sets the double-click time metrics.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.IsAdornment">
            <summary>
            Identify if this InteractiveOverlay is an Adornment.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.#ctor">
            <summary>
            Default constructor of the class.
            
            If you use this constructor, please set the properties manually or it will
            use their default values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.EndTracking">
            <summary>
            This method ends the tracking shape by initializing some variables.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDown logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseMove logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseUp logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseClick logic in its base class.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDoubleClick logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.GetTrackingShape">
            <summary>
            This method gets the current Tracking shape.
            </summary>
            <returns>Returns a shape that represents the current status of the tracking shape.</returns>
            <remarks>
            	<para>This method is the concrete wrapper for the abstract method GetTrackingShapeCore. This
                method draws the representation of the overlay based on the extent you provided.<br/>
            		<br/></para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.GetTrackingShapeCore">
            <summary>
            This is the Core method of GetTrackingShape. You can override this method and provide your own logic.
            This method gets the current Tracking shape.
            </summary>
            <returns>Returns a shape that represents the current status of the tracking shape.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnTrackEnded(ThinkGeo.MapSuite.DesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the end of Tracking a shape.
            </summary>
            <param name="e">The TrackEndedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnTrackEnding(ThinkGeo.MapSuite.DesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the end of Tracking a shape.
            </summary>
            <param name="e">The TrackEndingTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnTrackStarting(ThinkGeo.MapSuite.DesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the start of Tracking a shape.
            </summary>
            <param name="e">The TrackStartingTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnTrackStarted(ThinkGeo.MapSuite.DesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the start of Tracking a shape.
            </summary>
            <param name="e">The TrackStartedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnVertexAdding(ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before adding a vertex to the Tracking shape.
            </summary>
            <param name="e">The VertexAddingTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnVertexAdded(ThinkGeo.MapSuite.DesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after adding a vertex to the Tracking shape.
            </summary>
            <param name="e">The VertexAddedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.OnMouseMoved(ThinkGeo.MapSuite.DesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired when the mouse moves a vertex in the Tracking shape.
            </summary>
            <param name="e">The MouseMovedTrackInteractiveOverlayEventArgs passed for the event raised. </param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the TrackInteractiveOverlay.</summary>
            <remarks>
             This method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackEnded">
            <summary>This event will be fired after the end of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackEnding">
            <summary>This event will be fired before the end of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackStarted">
            <summary>This event will be fired after the start of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackStarting">
            <summary>This event will be fired before the start of tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.VertexAdded">
            <summary>This event will be fired after a vertex is added to the tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.VertexAdding">
            <summary>This event will be fired before a vertex is added to the tracking shape.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseMoved">
            <summary>This event will be fired when the mouse is moved on the vertex of the tracking shape.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.IsEmpty">
            <summary>
            This property overrides the logic in its base class by watching the feature count 
            in trackShapeLayer.
            
            If it is empty, we can skip drawing the track shape for better performance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.Vertices">
            <summary>
            This property gets the vertices that make up the track shape.
            This is a protected property which probably needs to be used in its sub classes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackShapeLayer">
            <summary>
            This property gets the TrackShape layers that hold the track shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackMode">
            <summary>Gets a mode of TrackOverlay.</summary>
            <remarks>
            The default mode is TrackMode.None, which means you cannot draw or edit features
            at the client side. By setting the mode to TrackMode.Point, TrackMode.Line, TrackMode.Polygon,
            etc., you can add points, lines or polygons to the FeatureOverlay. Setting the mode to
            TrackMode.Edit lets you edit the shapes at the client side.
            </remarks>
            <value>A mode of TrackOverlay.</value>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay">
            <summary>
            This class inherits from the interactiveOverlay abstract class. This specified overlay describes the
            Extent Changing interactive process with the MapControl using the Mouse or Keyboard.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.#ctor">
            <summary>
            Default constructor of the class.
            
            If you use this constructor, please set the properties correctly or it will
            use their default values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDown logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseMove logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseUp logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseClick logic in its base class.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDoubleClick logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseWheelCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseWheel logic in its base class interactiveOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction auguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the ExtentInteractiveOverlay.</summary>
            <remarks>
             This method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.IsEmpty">
            <summary>
            This property overrides its property in the base class by watching the feature count in trackZoomLayer.
            
            If it is empty, we can skip drawing it for better performance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.PanAndTrackZoomState">
            <summary>
            This protected property gets and sets the PanAndTrackZoomState with the information stored.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.ZoomPercentage">
            <summary>
            Gets or sets the zoom percentage when using the mouse wheel or double-clicking to zoom the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.PanMode">
            <summary>
            This property gets or sets the <strong>PanMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.DoubleLeftClickMode">
            <summary>
            This property gets or sets the <strong>DoubleLeftClickMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.DoubleRightClickMode">
            <summary>
            This property gets or sets the <strong>DoubleRightClickMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.MouseWheelMode">
            <summary>
            This property gets or sets the <strong>MouseWheelMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.LeftClickDragMode">
            <summary>
            This property gets or sets the <strong>LeftClickDragMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.RightClickDragMode">
            <summary>
            This property gets or sets the <strong>RightClickDragMode</strong> used for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.LeftClickDragKey">
            <summary>
            This property gets or sets the Keys used in LeftClickDrag for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.RightClickDragKey">
            <summary>
            This property gets or sets the Keys used in RightClickDrag for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExtentInteractiveOverlay.ExtentChangedType">
            <summary>
            This property gets or sets the ExtentChangedType for the
            ExtentInteractiveOverlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments">
            <summary>
            This class encapsulates the information and simple method for key events interative actions.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set its properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is the constructor of this parameter by passing parameters.
            </summary>
            <param name="key">This parameters indicates the key string used in the events.</param>
            <param name="isCtrlKeyPressed">This parameter indicates the CTRIL key is pressed or not.</param>
            <param name="isShiftKeyPressed">This parameter indicates the SHIFT key is pressed or not.</param>
            <param name="isAltKeyPressed">This parameter indicates the ALT key is pressed or not.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.Key">
            <summary>
            This property gets and sets string indicates the key used in the key events.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.IsCtrlKeyPressed">
            <summary>
             Gets and sets a value indicating whether the CTRL key was pressed.
             true if the CTRL key was pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.IsShiftKeyPressed">
            <summary>
             Gets a value indicating whether the SHIFT key was pressed.
             true if the SHIFT key was pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.IsAltKeyPressed">
            <summary>
             Gets and sets a value indicating whether the ALT key was pressed.
             true if the ALT key was pressed; otherwise, false.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.CurrentExtent">
            <summary>
            This property gets or sets the current extent used in the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.ZoomLevelSet">
            <summary>
            This property gets or sets the ZoomLevelSet used in the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.ZoomLevelSnapping">
            <summary>
            This property gets or sets the ZoomLevelSnappingMode used in the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments.CurrentScale">
            <summary>
            This property gets or sets the scale in the current status.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexDraggingMode">
            <summary>
            This enumeration specifies the control points connect mode when reshape a shape.
            The deafault value is None.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.VertexDraggingMode.Default">
            <summary>
            Default value of this enumeration
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.VertexDraggingMode.Single">
            <summary>
            This enumeration item means that the control point is used to change the position of one of a group vertexes when they are in same location.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.VertexDraggingMode.Shared">
            <summary>
            This enumeration item means that the control point is used to change the position of vertexes when they are in same location.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.VertexAdded">VertexAdded</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="addedVertex">This parameter specifies the vertex that was added.</param>
            <param name="affectedFeature">This parameter specifies the feature that the vertex was added to when tracking shape.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.AddedVertex">
            <summary>
            This property gets or sets the vertex added.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddedTrackInteractiveOverlayEventArgs.AffectedFeature">
            <summary>
            This property gets or sets the Feature that the vertex was added to.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseClickInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseClick">MapMouseClick</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseClickInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseClickInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specifies the interaction arguments used to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapMouseClickInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the mouse click event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised before any of the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.Overlay,ThinkGeo.MapSuite.Core.GeoCanvas,System.Boolean)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlay to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlay">This parameter is the overlay that will be drawn.</param>
            <param name="canvas">This parameter is the canvas that will are drawing on.</param>
            <param name="cancel">This parameter specifies whether or not we will cancel drawing of the overlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs.Canvas">
            <summary>
            This property gets and sets the GeoCanvas we are drawing
            on.
            </summary>
            <value>This property gets the GeoCanvas we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs.Overlay">
            <summary>This property gets and sets the overlay you will be drawing.</summary>
            <value>This property gets the overlay you will be drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWpfMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapPanMode">
            <summary>
            This enumeration specifies the behavior type for panning.
            The default value is StandardPanning.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapPanMode.Default">
            <summary>
            Default value (StandardPanning) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapPanMode.StandardPanning">
            <summary>
            This enumeration item means that the map will behave as standard with respect to panning.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapPanMode.Disabled">
            <summary>
            This enumeration item means that panning will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapKeyUpInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapKeyUp">MapKeyUp</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapKeyUpInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapKeyUpInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction arguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapKeyUpInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay">
            <summary>
            This class inherits from the InterativeOverlay abstract class. This specified overlay describes the
            EditShape interactive process with the MapControl using the Mouse or Keyboard.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.#ctor">
            <summary>
            Default constructor of the class.
            
            If you use this constructor, please set the properties manually or it will
            use their default values.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the EditInterativeOverlay.</summary>
            <remarks>
             This method draws a representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
            
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.SetSelectedControlPoint(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
             <summary>This protected method sets the control point.</summary>
             <returns>Returns true if control points are found and set correctly, otherwise returns false.</returns>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a minus value for the tolerance, we will throw an ArgumentOutOfRangeException.</exception>
             <param name="targetPointShape">This parameter is the target point shape we will edit.</param>
             <param name="searchingTolerance">This parameter is the search tolerance used when searching for the control point.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.SetSelectedControlPointCore(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
             <summary>This protected virtual method is the Core method of the SetSelectedControlPoint API.</summary>
             <returns>A feature that represents the selected control point.</returns>
             <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a minus value for the tolerance, we will throw an ArgumentOutOfRangeException.</exception>
             <param name="targetPointShape">This parameter is the target point shape we will edit.</param>
             <param name="searchingTolerance">This parameter is the search tolerance to use when searching for the control point.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.EndEditing(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
             This method ends the interative editing on the feature in the EditShapesLayer.
             You can override its logic by rewriting its core method.
             </summary>
             <param name="targetPointShape">This is the targetPointShape to be used when overriding.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.EndEditingCore(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the core method of the EndEditing method.
            This method end interative editing on the feature in the EditShapesLayer.
            </summary>
            <param name="targetPointShape">This is the targetPointShape to be used when overriding.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ClearAllControlPoints">
            <summary>
            This method clears all control points in a corresponding layer.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateAllControlPoints">
            <summary>
            This method calculates all control points.
            </summary>
            <remarks>First, it will clear all control points. Then it will calculate each control point according to their settings.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateDragControlPoints">
            <summary>
            This method calculates the Drag control points for all the features in the EditShapesLayer.
            You can override its logic by rewriting its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateDragControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateDragControlPoints method. You can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature whose control points you want to calculate.</param>
            <returns>A collection of features representing the Drag control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateRotateControlPoints">
            <summary>
            This method calculates the Rotate control points for all the features in the EditShapesLayer.
            You can override its logic by rewriting its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateRotateControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateRotateControlPoints method. You can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature whose control points you want to calculate.</param>
            <returns>A collection of features representing the Rotate control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateResizeControlPoints">
            <summary>
            This method calculates the Resize control points for all the features in the EditShapesLayer.
            You can override its logic by rewriting its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateResizeControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateResizeControlPoints method. You can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature whose control points you want to calculate.</param>
            <returns>A collection of features representing the Resize control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateVertexControlPoints">
            <summary>
            This method calculates the Vertex control points for all the features in the EditShapesLayer.
            You can override its logic by rewriting its core method.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CalculateVertexControlPointsCore(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the core API for the CalculateVertexControlPoints method. You can override this method 
            if you want to change its logic.
            </summary>
            <param name="feature">The target feature whose control points you want to calculate.</param>
            <returns>A collection of features representing the Vertex control points.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MouseDownCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDown logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MouseMoveCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseMove logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MouseUpCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseUp logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MouseClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseClick logic in its base class.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MouseDoubleClickCore(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>This overrides the MouseDoubleClick logic in its base class InterativeOverlay.</summary>
            <returns>Interaction results of this method.</returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the interactionArguments, we will throw an ArgumentNullException.</exception>
            <param name="interactionArguments">This parameter represents the interaction arguments for the method.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.DragFeature(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method used to Drag a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method DragFeatureCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be dragged.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to drag the feature.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to drag the feature.</param>
            <returns>Returns a dragged feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.DragFeatureCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of DragFeature which encapsulates the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be dragged.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to drag the feature.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to drag the feature.</param>
            <returns>Returns a dragged feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ResizeFeature(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method used to Resize a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method ResizeFeatureCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be resized.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to resize the feature.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to resize the feature.</param>
            <returns>Returns a resized feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ResizeFeatureCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of ResizeFeature which encapsulates the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be resized.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to resize the feature.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to resize the feature.</param>
            <returns>Returns a resized feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.RotateFeature(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method used to Rotate a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method RotateFeatureCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be rotated.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to rotate the feature.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to rotate the feature.</param>
            <returns>Returns a rotated feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.RotateFeatureCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of RotateFeature which encapsulates the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature to be rotated.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to rotate the feature.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to rotate the feature.</param>
            <returns>Returns a rotated feature.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.AddVertex(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
            <summary>
            This is the method used to add vertex to a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method AddVertexCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a negative value for searchingTolerance, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="targetPointShape">This parameter specifies the point shape in which to search for the vertex.</param>
            <param name="searchingTolerance">This parameter specifies the search tolerance used when searching for the vertex.</param>
            <returns>True if add vertex succeeded, otherwise returns false.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.AddVertexCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,System.Double)">
            <summary>
            This is the Core method of AddVertex which encapsulates the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a negative value for searchingTolerance, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="targetPointShape">This parameter specifies the target vertex to be added.</param>
            <param name="searchingTolerance">This parameter specifies the search tolerance used when searching for the vertex.</param>
            <param name="targetFeature">This parameter specifies the target feature that the vertex will be added to.</param>
            <returns>Returns a feature with vertex added.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MoveVertex(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the method used to move a vertex in a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method MoveVertexCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature whose vertex will be moved.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to move the feature's vertex.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to move the feature's vertex.</param>
            <returns>Returns a feature with vertex moved.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.MoveVertexCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the Core method of MoveVertex which encapsulates the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the sourceControlPoint, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetControlPoint, we will throw an ArgumentNullException.</exception>
            <param name="sourceFeature">This parameter specifies the source feature whose vertex will be moved.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point used to move the feature's vertex.</param>
            <param name="targetControlPoint">This parameter specifies the target control point used to move the feature's vertex.</param>
            <returns>Returns a feature with vertex moved.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.RemoveVertex(ThinkGeo.MapSuite.Core.PointShape,System.Double)">
            <summary>
            This is the method used to remove a vertex from a feature.
            </summary>
            /// <remarks>
            	<para>This method is the concrete wrapper for the abstract method RemoveVertexCore.<br/>
            		<br/>
                As this is a concrete public method that wraps a Core method, we reserve the right
                to add events and other logic to pre- or post-process data returned by the Core version
                of the method. In this way, we leave our framework open on our end, but also allow you
                the developer to extend our logic to suit your needs. If you have questions about this,
                please contact our support team as we would be happy to work with you on extending our
                framework.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a negative value for the searchingTolerance, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="targetPointShape">This parameter specifies the point shape in which to search for the vertex.</param>
            <param name="searchingTolerance">This parameter specifies the search tolerance used when searching for the vertex.</param>
            <returns>True if remove vertex succeeded, otherwise returns false.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.RemoveVertexCore(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex,System.Double)">
            <summary>
            This is the Core method of RemoveVertex which encapsulates the logic.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">If you pass a null as the targetPointShape, we will throw an ArgumentNullException.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">If you pass a negative value for the searchingTolerance, we will throw an ArgumentOutOfRangeException.</exception>
            <param name="selectedVertex">This parameter specifies the selected vertex to search for.</param>
            <param name="searchingTolerance">This parameter specifies the search tolerance used when searching for the vertex.</param>
            <param name="editShapeFeature">This parameter specifies the target feature to remove the vertex from.</param>
            <returns>Returns a feature with vertex removed.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnFeatureDragging(ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before dragging the feature.
            </summary>
            <param name="e">The FeatureDraggingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnFeatureDragged(ThinkGeo.MapSuite.DesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after dragging the feature.
            </summary>
            <param name="e">The FeatureDraggedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnFeatureResizing(ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before resizing the feature.
            </summary>
            <param name="e">The FeatureResizingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnFeatureResized(ThinkGeo.MapSuite.DesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after resizing the feature.
            </summary>
            <param name="e">The FeatureResizedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnFeatureRotating(ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before rotating the feature.
            </summary>
            <param name="e">The FeatureRotatingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnFeatureRotated(ThinkGeo.MapSuite.DesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after rotating the feature.
            </summary>
            <param name="e">The FeatureRotatedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnControlPointSelecting(ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the control point is selected.
            </summary>
            <param name="e">The ControlPointSelectingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnControlPointSelected(ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the control point is selected.
            </summary>
            <param name="e">The ControlPointSelectedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnVertexAdding(ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the vertex is added to the edit feature.
            </summary>
            <param name="e">The VertexAddingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnVertexAdded(ThinkGeo.MapSuite.DesktopEdition.VertexAddedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the vertex is added to the edit feature.
            </summary>
            <param name="e">The VertexAddedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnVertexMoving(ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before moving the feature.
            </summary>
            <param name="e">The VertexMovingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnVertexMoved(ThinkGeo.MapSuite.DesktopEdition.VertexMovedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after moving the feature.
            </summary>
            <param name="e">The VertexMovedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnVertexRemoving(ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired before the vertex is removed from the edit feature.
            </summary>
            <param name="e">The VertexRemovingEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OnVertexRemoved(ThinkGeo.MapSuite.DesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs)">
            <summary>
            This event will be fired after the vertex is removed from the edit feature.
            </summary>
            <param name="e">The VertexRemovedEditInteractiveOverlayEventArgs passed for the event raised.</param>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureDragged">
            <summary>This event will be fired after dragging the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureDragging">
            <summary>This event will be fired before dragging the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureResized">
            <summary>This event will be fired after resizing the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureResizing">
            <summary>This event will be fired before resizing the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureRotated">
            <summary>This event will be fired after rotating the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureRotating">
            <summary>This event will be fired before rotating the feature.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexAdded">
            <summary>This event will be fired after adding the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexAdding">
            <summary>This event will be fired before adding the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexMoved">
            <summary>This event will be fired after moving the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexMoving">
            <summary>This event will be fired before moving the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexRemoved">
            <summary>This event will be fired after removing the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexRemoving">
            <summary>This event will be fired before removing the vertex.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ControlPointSelected">
            <summary>This event will be fired after selecting the control point.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ControlPointSelecting">
            <summary>This event will be fired before selecting the control point.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.IsEmpty">
            <summary>
            This property overrides its property in the base class by watching the feature count in editShapesLayer.
            
            If it is empty, we can skip drawing it for better performance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexDraggingMode">
            <summary>
            This property gets or sets the reshape mode for the control points when edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.EditShapesLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.DragControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer, which holds the control points for dragging.
            </summary>
            <remarks>Every control point for dragging is not an existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.RotateControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points for rotating.
            </summary>
            <remarks>Every control point for rotating is not an existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ResizeControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points for resizing.
            </summary>
            <remarks>Every control point for resizing is not an existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ExistingControlPointsLayer">
            <summary>
            This property gets the InMemoryFeatureLayer which holds the control points that represent the existing vertices of the edit shapes.
            </summary>
            <remarks>Every control point in this layer is an existing vertex of the edit shapes.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ControlPointType">
            <summary>
            This property gets or sets the ControlPointType for the control points of the edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.SelectControlPointFeature">
            <summary>
            This property gets the feature that represents the selected control points of the edit shapes.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.OriginalEditingFeature">
            <summary>
            This property gets the feature that represents the original editing feature.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CanDrag">
            <summary>Gets a value that indicates whether or not the shape can be dragged.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CanReshape">
            <summary>Gets a value that indicates whether or not the shape can be reshaped.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CanResize">
            <summary>Gets a value that indicates whether or not the shape can be resized.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CanRotate">
            <summary>Gets a value that indicates whether or not the shape can be rotated.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CanAddVertex">
            <summary>Gets a value that indicates whether or not the shape can Add new vertex.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.CanRemoveVertex">
            <summary>Gets a value that indicates whether or not the shape can remove a existing vertex.</summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ControlPointSelected">ControlPointSelected</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="selectedFeature">This parameter specifies the feature selected.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectedEditInteractiveOverlayEventArgs.SelectedFeature">
            <summary>
            This property gets or sets the selected feature.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs">
            <summary>
            This class represents the event arguments for the MarkerDragged event for SimpleMarkerOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.#ctor">
            <summary>
            This is the constructor of MarkerDraggedSimpleMarkerOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.Marker,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Constructor of the MarkerDraggedSimpleMarkerOverlayEventArgs class.
            </summary>
            <param name="marker">This parameter indicates the marker which is dragged.</param>
            <param name="worldCoordinate">This parameter indicates current mouse position in world coordinate.</param>
            <param name="currentLocation">This parameter indicates current mouse position in screen coordinate.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.Marker">
            <summary>
            Gets or sets the marker which is dragged.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggedSimpleMarkerOverlayEventArgs.CurrentLocation">
            <summary>
            Gets or sets current mouse position in screen coordinate.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.AdornmentOverlay">
            <summary>
            This class inherits from the Overlay abstract class. This specified overlay stores
            the <strong>AdornmentLayer</strong> used in the MapControl.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.AdornmentOverlay.#ctor">
            <summary>This is the default constructor of the class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.AdornmentOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method overrides the DrawCore logic in the Overlay base class.
            
            Draw all of the AdornmentLayers to the image object using the parameters specified.
            </summary>
            <param name="canvas">This parameter specifies the target canvas to draw the current
            AdornmentOverlay on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.AdornmentOverlay.Layers">
            <summary>
            This property gets a collection of the <strong>AdornmentLayers</strong> that are added to
            the <strong>AdornmentOverlay.</strong>
            </summary>
            <value>
            A collection of <strong>AdornmentLayers</strong> that are added to the
            <strong>AdornmentOverlay</strong> to be drawn.
            </value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.AdornmentOverlay.ShowLogo">
            <summary>
            This property is a easy way to add the <strong>LogoAdornmentLayer</strong> to
            the AdormentOverlay.
            </summary>
            <value>
            Boolean value that indicates whether the LogoAdornmentLayer will be drawn or
            not.
            </value>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlayDrawType">
            <summary>
            This enumeration specifies the mode in which to draw the InterativeOverlay
            when doing interactive actions with InterativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlayDrawType.Default">
            <summary>
            Default value of the enumation, the same as DoNotDraw.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlayDrawType.Draw">
            <summary>
            This enumeration item means that InterativeOverlay will still be drawn.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlayDrawType.DoNotDraw">
            <summary>
            This enumeration item means that InterativeOverlay will not be drawn.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexMoving">VertexMoving</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="movingVertex">This parameter specifies the target vertex to be moved.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="movingVertex">This parameter specifies the target vertex to be moved.</param>
            <param name="targetVertex">This parameter specifies the target vertex to be moved.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            This property gets or sets the Feature whose vertex will be moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.MovingVertex">
            <summary>
            This property gets or sets the vertex to be moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.TargetVertex">
            <summary>
            This property gets or sets the target control point to moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexMovingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ZoomLevelSnappingMode">
            <summary>
            This enumation provides the options used to set the <strong>ZoomLevel</strong>
            Snapping Mode. In SnapUp or Default mode, there are only 20 preset ZoomLevels whose
            scales are set accordingly with OpenLayers' scales. You can change this by setting the
            SnappingMode to None, but in doing so, you will lose the ability to use the TileCache system.
            </summary>
            <example>
            	<code lang="CS" title="C# Sample" description="This code snippet shows how to set the ZoomLevel snapping mode to None.">
            winformsMap1.ZoomLevelSnapping = ZoomLevelSnappingMode.None;
            </code>
            	<code lang="VB" title="VB sample" description="This code snippet shows how to set the ZoomLevel snapping mode to none.">
            winformsMap1.ZoomLevelSnapping =ZoomLevelSnappingMode.None
            </code>
            </example>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ZoomLevelSnappingMode.Default">
            <summary>
            This is the default value of the ZoomLevel SnappingMode.  Currently, the default value
            has the same effects as the SnapUp value.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ZoomLevelSnappingMode.SnapUp">
            <summary>
            This is the SnapUp value of ZoomLevel SnappingMode.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ZoomLevelSnappingMode.None">
            <summary>
            This is the None value of ZoomLevel SnappingMode.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs">
            This class is keep consistent with the base class MouseEventArgs.
            <summary>
                Provides data for the WinformsMap or WpfMap's <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MapClick">MapClick</see>
                event.
            </summary>
            <remarks>
            The MapClick event occurs when you click the mouse button on the map, without dragging (i.e., without
            moving the mouse between pressing the button down and releasing it).
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.#ctor(System.Single,System.Single,System.Double,System.Double,ThinkGeo.MapSuite.DesktopEdition.MapMouseButton)">
            <summary>
            Initializes a new instance of the <strong>WinformsMapClickEventArgs</strong>
            class.
            </summary>
            <param name="mouseButton">The button of the mouse used during the generating mouse event.</param>
            <param name="screenX">The X screen coordinate of the mouse cursor during the generating mouse event.</param>
            <param name="screenY">The Y screen coordinate of the mouse cursor during the generating mouse event.</param>
            <param name="worldX">The X world coordinate of the mouse cursor during the generating mouse event.</param>
            <param name="worldY">The Y world coordinate of the mouse cursor during the generating mouse event.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.ScreenX">
            <summary>
            Gets the screen X coordinate of the position clicked.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.ScreenY">
            <summary>
            Gets the screen Y coordinate of the position clicked.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.WorldX">
            <summary>
            Gets the X world coordinate of the mouse cursor during the generating mouse
            event.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.WorldY">
            <summary>
            Gets the Y world coordinate of the mouse cursor during the generating mouse
            event.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.MouseButton">
            <summary>
            Gets the mouse button used when the mouse click event is fired.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs.WorldLocation">
            <summary>
            Gets the location in world coordinates of the mouse cursor during the generating mouse
            event.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Marker.ToolTipText">
            <summary>
            Gets or sets a tooltip for marker.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Marker.ToolTipDelayInMilliseconds">
            <summary>
            Gets or sets an interval in milliseconds.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.BackgroundOverlay">
            <summary>
            This class inherits from the Overlay abstract class. The specified overlay 
            specifies the background information of the MapControl.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.BackgroundOverlay.#ctor">
            <summary>This is the default constructor of the class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.BackgroundOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method overrides the DrawCore logic in the Overlay base class.
            
            Draw all of the background to the image object using the parameters specified.
            </summary>
            <param name="canvas">This parameter specifies the target canvas on which to draw the current
            AdormentOverlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.BackgroundOverlay.BackgroundBrush">
            <summary>
            This property gets or sets the background brush for the MapControl.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureDragging">FeatureDragging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,System.Boolean,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="draggingFeature">This parameter specifies the target feature to be dragged.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point to be dragged.</param>
            <param name="targetControlPoint">This parameter specifies the target control point to be dragged.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.DraggingFeature">
            <summary>
            This property gets or sets the Feature to be dragged.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.SourceControlPoint">
            <summary>
            This property gets or sets the source control point to drag.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.TargetControlPoint">
            <summary>
            This property gets or sets the target control point to drag.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.MouseMoved">MouseMoved</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="affectedFeature">This parameter specifies the affected feature.</param>
            <param name="movedVertex">This parameter specifies the target vertex to be moved.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.MovedVertex">
            <summary>
            This property gets or sets the vertex to be moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MouseMovedTrackInteractiveOverlayEventArgs.AffectedFeature">
            <summary>
            This property gets or sets the Feature to be affected.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseUpInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseUp">MapMouseUp</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseUpInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseUpInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specifies the interaction arguments used to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapMouseUpInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ControlPointType">
            <summary>
            This enumeration specifies the control point type when editing a shape.
            The deafault value is None.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ControlPointType.None">
            <summary>
            Default value of this enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ControlPointType.Drag">
            <summary>
            This enumeration item means that the control point is used to Drag.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ControlPointType.Rotate">
            <summary>
            This enumeration item means that the control point is used to Rotate.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ControlPointType.Resize">
            <summary>
            This enumeration item means that the control point is used to Resize.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ControlPointType.Vertex">
            <summary>
            This enumeration item means that the control point is used to change the vertex postion.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackEnding">TrackEnding</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.BaseShape,System.Boolean)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="shape">This parameter specifies the shape to be tracking out.</param>
            <param name="cancel">This parameter specifies the cancel property.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.TrackShape">
            <summary>
            This property gets or sets the shape to be tracking out.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackEndingTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton">
            <summary>
            This enumeration defines a MouseButton for MapControl.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapMouseButton.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle">
            <summary>This class represents the ordinary point marker style.</summary>
            <remarks>
            The <strong>PointMarkerStyle</strong> contains the basic style for creating a
            marker such as web image, popup and context menu. Use this style to create a batch of
            markers with the same appearance.
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MarkerStyle">
            <summary>
            This class represents the base class for all classes that defines the styles
            applied to the markers.
            </summary>
            <remarks>
            The <strong>MarkerStyle</strong> class is the base class for all style classed
            that contains the style definition of markers. When dynamicly creating the markers,
            these style classes apply their styles to markers. The <strong>MarkerStyle</strong>
            class has an abstract <strong>GetMarkers</strong> method which accepts a collection of
            features. It creates a collection of markers with the styles specified from these
            features. Inherit from this class and implements the <strong>GetMarkers</strong> method
            if you want to create your own <strong>MarkerStyle</strong>.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerStyle.#ctor">
            <summary>Initialize an instance of the MarkerStyle class.</summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerStyle.GetMarkers(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Feature})">
            <summary>
            The abstract method returns a collection of markers from the features that passed
            in.
            </summary>
            <returns>A collection of marker controls that will be overlap on the map control.</returns>
            <param name="features">A collection of features that the markers are created from.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.#ctor">
            <summary>Constructor of the <strong>PointMarkerStyle</strong> class.</summary>
            <overloads>This is constructor of the <strong>PointMarkerStyle</strong> class.</overloads>
            <remarks>This is constructor of the <strong>PointMarkerStyle</strong> class.</remarks>
            <returns>An instance of <strong>PointMarkerStyle</strong> class.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.#ctor(System.Drawing.Image)">
            <summary>Constructor of the <strong>PointMarkerStyle</strong> class.</summary>
            <overloads>This is constructor of the <strong>PointMarkerStyle</strong> class.</overloads>
            <remarks>This is constructor of the <strong>PointMarkerStyle</strong> class.</remarks>
            <returns>An instance of <strong>PointMarkerStyle</strong> class.</returns>
            <param name="imageSource">An ImageSource value indicating the icon source for the marker.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.GetMarkers(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.Core.Feature})">
            <summary>
            This method returns a collection of markers that created with specific styles
            from the features passed in.
            </summary>
            <returns>A collection of markers that create from the features.</returns>
            <remarks>
            This method returns a collection of markers that created with specific styles
            from the features passed in.
            </remarks>
            <param name="features">A collection of features that the markers are created from.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.Image">
            <summary>Gets or sets the small image that the marker displays.</summary>
            <value>A small image that the marker displays.</value>
            <remarks>Gets or sets the small image that the marker displays.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.Width">
            <summary>Gets or sets the width in pixel of the web image.</summary>
            <value>A double value indicating the width in pixel of the image file.</value>
            <remarks>Gets or sets the width in pixel of the web image.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.Height">
            <summary>Gets or sets the height in pixel of the web image.</summary>
            <value>A double value indicating the height in pixel of the image file.</value>
            <remarks>Gets or sets the height in pixel of the web image.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.XOffset">
            <summary>Gets or sets the image's X offset in pixel.</summary>
            <value>A double value indicating the image's X offset in pixel.</value>
            <remarks>Gets or sets the image's X offset in pixel.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PointMarkerStyle.YOffset">
            <summary>Gets or sets the image's Y offset in pixel.</summary>
            <value>A double value indicating the image's Y offset in pixel.</value>
            <remarks>Gets or sets the image's Y offset in pixel.</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ControlFactory">
            <summary>
            Summary description for FormControlFactory.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CBFormCtrl">
            <summary>
            Summary description for CBFormCtrl.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.DrawnOverlayEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the Overlay has been drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the Overlay has been drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.DrawnOverlayEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.DrawnOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the Overlay drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="geoCanvas">This parameter is the GeoCanvas that have drawn.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.DrawnOverlayEventArgs.GeoCanvas">
            <summary>
            This property gets and sets the GeoCanvas we are drawing
            on.
            </summary>
            <value>This property gets the GeoCanvas we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.DrawingAttributionOverlayEventArgs.Cancel">
            <summary>
            This property gets and sets a value that determines whether you want to cancel the Overlay from
            drawing.
            </summary>
            <value>This property gets a value that determines whether you want to cancel the Overlay from drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.DrawingAttributionOverlayEventArgs.GeoCanvas">
            <summary>
            This property gets and sets the GeoCanvas we are drawing
            on.
            </summary>
            <value>This property gets the GeoCanvas we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentExtentChanging">CurrentExtentChanging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentExtentChangingEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentExtentChangingEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single,System.Boolean)">
            <overloads>Initialize an instance of the CurrentExtentChangingEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentExtentChangingEventArgs class by passing 
            the currentExtent, mapUnit, mapWidth and mapHeight.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.NewExtent">
            <summary>
            This property specifies the NewExtent of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWpfMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.ControlPointSelecting">ControlPointSelecting</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="targetPointShape">This parameter specifies the target control point to be selected.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.TargetPointShape">
            <summary>
            This property gets or sets the target control point to be selected.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ControlPointSelectingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureRotating">FeatureRotating</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,System.Boolean,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="rotatingFeature">This parameter specifies the target feature to be rotated.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point to be rotated.</param>
            <param name="targetControlPoint">This parameter specifies the target control point to be rotated.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.RotatingFeature">
            <summary>
            This property gets or sets the Feature to be rotated.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.SourceControlPoint">
            <summary>
            This property gets or sets the source control point to rotate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.TargetControlPoint">
            <summary>
            This property gets or sets the target control point to rotate.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlayLock">
            <summary>
            This class defines a lock that supports a single writer and multiple readers.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayLock.#ctor">
            <summary>
            Default constructor of this class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayLock.EnterReadLock">
            <summary>
            Enter the read lock immediately.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayLock.EnterWriteLock">
            <summary>
            Enter the write lock immediately.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayLock.ExitReadLock">
            <summary>
            Exit the read lock immediately.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayLock.ExitWriteLock">
            <summary>
            Exit the write lock immediately.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayLock.IsDirty">
            <summary>
            This property can be used to mark the Overlay "dirty," which indicates that its data has changed.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.InteractiveResult">
            <summary>
            This class specifies the InterativeResult when dealing with the Interative method in InterativeOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveResult.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractiveResult.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlayDrawType,ThinkGeo.MapSuite.DesktopEdition.ProcessOtherOverlaysMode)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactiveOverlayDrawType">This parameter specifies the interactiveOverlayDrawType used to construct the class.</param>
            /// <param name="processOtherOverlays">This parameter specifies the processOtherOverlays used to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractiveResult.DrawThisOverlay">
            <summary>
            This property gets and sets the DrawThisOverlay type, which indicates whether to draw this overlay or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractiveResult.ProcessOtherOverlaysMode">
            <summary>
            This property gets and sets the DrawThisOverlay type, which indicates how to process other overlays.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractiveResult.NewCurrentExtent">
            <summary>
            This property gets and sets the new current extent if the interative action affects the extent.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TrackMode">
            <summary>The TrackMode enumeration determines how the map will react to user interaction.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.None">
            <summary>Default mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Point">
            <summary>Point drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Line">
            <summary>Line drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Polygon">
            <summary>Polygon drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Rectangle">
            <summary>Rectangle drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Square">
            <summary>Square drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Circle">
            <summary>Circle drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Ellipse">
            <summary>Ellipse drawing mode.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.StraightLine">
            <summary>Allows the user to draw a simple line with only 2 points on the map.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Freehand">
            <summary>Allows the user to draw freehand on the map.</summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TrackMode.Custom">
            <summary>Allows the user to draw a custom track shape on the map.</summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackEnded">TrackEnded</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.BaseShape)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="trackShape">This parameter specifies the tracked shape.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackEndedTrackInteractiveOverlayEventArgs.TrackShape">
            <summary>
            This property gets or sets the tracked shape.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs">
            <summary>
            This is the event arguments for the OverlaysDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlaysDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay},ThinkGeo.MapSuite.Core.RectangleShape,System.Object,System.Boolean)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlays to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlays">This parameter is the overlays that will be drawing.</param>
            <param name="worldExtent">This parameter is the wold extent you are drawing.</param>
            <param name="nativeImage">This parameter is the native map image.</param>
            <param name="cancel">This parameter specifies whether we need to cancel drawing the overlays or not.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs.WorldExtent">
            <summary>This property gets and sets the world extent to be drawn.</summary>
            <value>This property gets the world extent to be drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs.NativeImage">
            <summary>
            This property gets and sets the GeoImage or native image we are drawing
            on.
            </summary>
            <value>This property gets the GeoImage or native image we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs.Overlays">
            <summary>This property gets the overlays you will be drawing.</summary>
            <value>This property gets the overlays you will be drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.LayerOverlay">
            <summary>: This class represents a group of layers; each layer can be of any layer type.</summary>
            <remarks>None</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.LayerOverlay.#ctor">
            <summary>Initialize an instance of the LayerOverlay class.</summary>
            <overloads>Initialize an instance of the LayerOverlay class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.LayerOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            Draw all of the layers to the image object using the parameters specified.
            </summary>
            <param name="canvas">
            The GeoCanvas object that the layers will draw on.
            </param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.LayerOverlay.Layers">
            <summary>
            Gets a GeoCollection that contains the layers that will draw on the image.
            </summary>
            <value>A GeoCollection of layers.</value>
            <remarks>
            The <strong>Layers</strong> property holds all of the layers that are used by the
            <strong>Draw</strong> method. The Draw method loops through all layers to filter
            out features and draw on the image with the specified styles. 
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.LayerOverlay.IsEmpty">
            <summary>
            Overrides the property in the base class Overlay.
            </summary>
            <remarks>If the layer count is zero, returns true. Otherwise, returns false.</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexMovedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexMoved">VertexMoved</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="movedVertex">This parameter specifies the target vertex moved.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            This property gets or sets the Feature whose vertex was moved.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexMovedEditInteractiveOverlayEventArgs.MovedVertex">
            <summary>
            This property gets or sets the vertex moved.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexAdding">VertexAdding</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="addingVertex">This parameter specifies the target vertex to be added.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            This property gets or sets the Feature the vertex will be added to.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.AddingVertex">
            <summary>
            This property gets or sets the vertex to be added.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentScaleChanged">CurrentScaleChanged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentScaleChangedEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentScaleChangedEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,ThinkGeo.MapSuite.Core.GeographyUnit,System.Int32,System.Int32)">
            <overloads>Initialize an instance of the CurrentScaleChangedEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentScaleChangedEventArgs class by passing 
            the currentScale, mapUnit and mapWidth.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.CurrentScale">
            <summary>
            This property specifies the CurrentScale of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapThreadingMode">
            <summary>
            This enumation provides two threading options when refreshing the map.
            The default value is SingleThreaded.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapThreadingMode.Default">
            <summary>
            Use default threading mode.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapThreadingMode.SingleThreaded">
            <summary>
            Use single-thread mode.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapThreadingMode.Multithreaded">
            <summary>
            Use multi-thread mode.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.DrawnAttributionOverlayEventArgs.GeoCanvas">
            <summary>
            This property gets and sets the GeoCanvas we are drawing
            on.
            </summary>
            <value>This property gets the GeoCanvas we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ProcessOtherOverlaysMode">
            <summary>
            This enumeration specifies the mode used to process other overlays
            when doing interactive actions with InterativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ProcessOtherOverlaysMode.Default">
            <summary>
            Default value of the enumation, the same as ProcessOtherOverlays.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ProcessOtherOverlaysMode.ProcessOtherOverlays">
            <summary>
            This enumeration item means that other overlays will still be executed.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ProcessOtherOverlaysMode.DoNotProcessOtherOverlays">
            <summary>
            This enumeration item means that other overlays will be ignored.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState">
            <summary>
            This class stores the information for Pan and Track Zoom.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.#ctor">
            <summary>
            Default constructor of this class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.GetNewExtent(ThinkGeo.MapSuite.Core.ScreenPointF,ThinkGeo.MapSuite.Core.RectangleShape,System.Double,System.Double)">
            <summary>
            This method is used to get an updated extent for interative action.
            </summary>
            <param name="location">This parameter specifies the current location of the mouse.</param>
            <param name="currentExtent">This parameter specifies the current extent.</param>
            <param name="width">This parameter specifies the width of the extent in screen units.</param>
            <param name="height">This parameter specifies the height of the extent in screen units.</param>
            <returns>Returns a updated extent which will replace the current extent.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.IsLeftClickDragKeyPressed">
            <summary>
            This property gets or sets the status of whether the left click drag key is pressed or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.IsRightClickDragKeyPressed">
            <summary>
            This property gets or sets the status of whether the right click drag key is pressed or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.IsMouseLeftButtonDown">
            <summary>
            This property gets or sets the status of whether the left mouse button is pressed down or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.IsMouseRightButtonDown">
            <summary>
            This property gets or sets the status of whether the right mouse button is pressed down or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.MouseMoveStartExtent">
            <summary>
            This property gets and sets the extent when the mouse move starts.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.StartXInScreen">
            <summary>
            This property gets or sets the starting screen X when interative action starts.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.StartYInScreen">
            <summary>
            This property gets or sets the starting screen Y when interative action starts.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.EndXInScreen">
            <summary>
            This property gets or sets the ending screen X when interative action ends.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.EndYInScreen">
            <summary>
            This property gets or sets the ending screen Y when interative action ends.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.OffsetXInScreen">
            <summary>
            This property gets screen offset X distance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.OffsetYInScreen">
            <summary>
            This property gets screen offset Y distance.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.UpperLeftPoint">
            <summary>
            This property gets the upper left screen point.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.PanAndTrackZoomState.LowRightPoint">
            <summary>
            This property gets the lower right screen point.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay">
            <summary>
            This class is used in Desktop Edition to access the WMTS Server.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.#ctor">
            <summary>
            This is the constructor of the class.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use, otherwise it will
            use their default values.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMTS Serer you are consuming</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Net.WebProxy)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMTS Serer you are consuming</param>
            <param name="webProxy">Proxy to use for the WMTS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Net.WebProxy,ThinkGeo.MapSuite.Core.WmtsSeverEncodingType)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMTS Serer you are consuming</param>
            <param name="webProxy">Proxy to use for the WMTS Server.</param>
            <param name="clientId">The clientId for the WMTS Server.</param>
            <param name="privateKey">The privateKey for the WMTS Server.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.ActiveLayerName">
            <summary>
            This property represents the available layers that can be requested from the client and shown on the map.
            </summary>
            <remarks>When requesting a map, a client may specify the layers to be shown on the map.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.ActiveStyleName">
            <summary>
            This property represents the available styles that can be requested from the client and shown on the map.
            </summary>
            <remarks>When requesting a map, a client may specify the styles to be shown on the map.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.Parameters">
            <summary>
            This property specifies a dictionary used to update the request sent from the client to
            the WMTS server.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.TileCache">
            <summary>
            Gets or sets the BitmapTileCache for the Overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WmtsOverlay.ServerUris">
            <summary>
            This property specifies the URI of the WMTS server.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.DrawingOverlayEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before the Overlay is drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before the Overlay is drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.DrawingOverlayEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.DrawingOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the Overlay to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="geoCanvas">This parameter is the GeoCanvas we are drawing on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.DrawingOverlayEventArgs.Cancel">
            <summary>
            This property gets and sets a value that determines whether you want to cancel the Overlay from
            drawing.
            </summary>
            <value>This property gets a value that determines whether you want to cancel the Overlay from drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.DrawingOverlayEventArgs.GeoCanvas">
            <summary>
            This property gets and sets the GeoCanvas we are drawing
            on.
            </summary>
            <value>This property gets the GeoCanvas we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs">
            This class is keep consistent with the base class MouseEventArgs.
            <summary>
                Provides data for the WinformsMap or WpfMap's <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MapClick">MapClick</see>
                event.
            </summary>
            <remarks>
            The MapClick event occurs when you click the mouse button on the map, without dragging (i.e., without
            moving the mouse between pressing the button down and releasing it).
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.#ctor(System.Single,System.Single,System.Double,System.Double,ThinkGeo.MapSuite.DesktopEdition.MapMouseButton)">
            <summary>
            Initializes a new instance of the <strong>WinformsMapClickEventArgs</strong>
            class.
            </summary>
            <param name="mouseButton">The data provided by the WpfMap system.</param>
            <param name="screenX">The X screen coordinate of the mouse cursor during the generating mouse event.</param>
            <param name="screenY">The Y screen coordinate of the mouse cursor during the generating mouse event.</param>
            <param name="worldX">The X world coordinate of the mouse cursor during the generating mouse event.</param>
            <param name="worldY">The Y world coordinate of the mouse cursor during the generating mouse event.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.ScreenX">
            <summary>
            Gets the screen Y coordinate of the position clicked.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.ScreenY">
            <summary>
            Gets the screen Y coordinate of the position clicked.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.WorldX">
            <summary>
            Gets the X world coordinate of the mouse cursor during the generating mouse
            event.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.WorldY">
            <summary>
            Gets the Y world coordinate of the mouse cursor during the generating mouse
            event.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.MouseButton">
            <summary>
            Gets the mouse button used when the mouse click event is fired.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapClickWpfMapEventArgs.WorldLocation">
            <summary>
            Gets the location in world coordinates of the mouse cursor during the generating mouse
            event.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexRemoving">VertexRemoving</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.#ctor(System.Boolean,ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="removingVertex">This parameter specifies the target vertex to be removed.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            This property gets or sets the Feature from which the vertex will be removed.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.RemovingVertex">
            <summary>
            This property gets or sets the vertex to be removed.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexRemovingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureResized">FeatureResized</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="resizedFeature">This parameter specifies the feature resized.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureResizedEditInteractiveOverlayEventArgs.ResizedFeature">
            <summary>
            This property gets or sets the Feature resized.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentExtentChanging">CurrentExtentChanging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentExtentChangingEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentExtentChangingEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit,System.Int32,System.Int32,System.Boolean)">
            <overloads>Initialize an instance of the CurrentExtentChangingEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentExtentChangingEventArgs class by passing 
            the currentExtent, mapUnit, mapWidth and mapHeight.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.NewExtent">
            <summary>
            This property specifies the NewExtent of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlaysDrawn event on the MapEngine class. It
            is raised after the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlaysDrawn event on the MapEngine class. It
            is raised after the overlays are drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay},ThinkGeo.MapSuite.Core.RectangleShape,System.Object)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlays drawn, the world extent and
            the image you have drawn on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlays">This parameter is the overlays that have been drawn.</param>
            <param name="worldExtent">This parameter is the wold extent that has been drawn.</param>
            <param name="nativeImage">This parameter is the GeoImage or native map image.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs.WorldExtent">
            <summary>This property gets and sets the world extent that has been drawn.</summary>
            <value>This property gets the world extent that has been drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs.NativeImage">
            <summary>
            This property gets and sets the GeoImage or native image we have drawn
            on.
            </summary>
            <value>This property gets the GeoImage or native image we have drawn on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWpfMapEventArgs.Overlays">
            <summary>This property gets the overlays you have drawn.</summary>
            <value>This property gets the overlays you have drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapRightClickDragMode">
            <summary>
            This enumeration specifies the behavior that occurs when you right-click-and-drag on the MapControl.
            The default value is ZoomOutWithKey.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapRightClickDragMode.Default">
            <summary>
            Default value (ZoomOutWithKey) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapRightClickDragMode.ZoomOutWithKey">
            <summary>
            This enumeration item means that the map will ZoomOut when a right-click-and-drag operation occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapRightClickDragMode.Disabled">
            <summary>
            This enumeration items means that the ZoomOut functionality for right-clicking-and-dragging will be disabled.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OpenStreetMapOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapLeftClickDragMode">
            <summary>
            This enumeration specifies the behavior that occurs when you left-click-and-drag on the MapControl.
            The default value is ZoomInWithKey.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapLeftClickDragMode.Default">
            <summary>
            Default value(ZoomInWithKey) of enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapLeftClickDragMode.ZoomInWithKey">
            <summary>
            This enumeration item means that the map will ZoomIn when a left-click-and-drag operation occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapLeftClickDragMode.Disabled">
            <summary>
            This enumeration item means that the ZoomIn functionality for left-clicking-and-dragging will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapFocusMode">
            <summary>
            The enumeration specifies the focus mode that will be used for map to take focus.
            The default value is MouseEnterFocused.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapFocusMode.Default">
            <summary>
            Default value (MouseEnterFocused) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapFocusMode.MouseEnterFocused">
            <summary>
            This item means that MapControl will take focus when the mouse enters the MapControl.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapFocusMode.ManuallyFocused">
            <summary>
            This item means that the MapControl will only take focus when the mapControl.Focus() API is called.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentScaleChanged">CurrentScaleChanged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentScaleChangedEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentScaleChangedEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single)">
            <overloads>Initialize an instance of the CurrentScaleChangedEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentScaleChangedEventArgs class by passing 
            the currentScale, mapUnit and mapWidth.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.CurrentScale">
            <summary>
            This property specifies the CurrentScale of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentScaleChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureResizing">FeatureResizing</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,System.Boolean,ThinkGeo.MapSuite.Core.PointShape,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="resizingFeature">This parameter specifies the target feature to be resized.</param>
            <param name="sourceControlPoint">This parameter specifies the source control point to be resized.</param>
            <param name="targetControlPoint">This parameter specifies the target control point to be resized.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.ResizingFeature">
            <summary>
            This property gets or sets the Feature to be resized.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.SourceControlPoint">
            <summary>
            This property gets or sets the source control point to resize.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.TargetControlPoint">
            <summary>
            This property gets or sets the target control point to resize.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureResizingEditInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether or not the action will be canceled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.VertexAdding">VertexAdding</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,ThinkGeo.MapSuite.Core.Feature,System.Boolean)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="addingVertex">This parameter specifies the vertex that is going to be added.</param>
            <param name="cancel">This parameter specifies the cancel property.</param>
            <param name="affectedFeature">This parameter specifies the feature that the vertex will be added to when tracking shape.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.AddingVertex">
            <summary>
            This property gets or sets the feature that the vertex will be added to when tracking shape.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddingTrackInteractiveOverlayEventArgs.AffectedFeature">
            <summary>
            This property gets or sets the Feature that the vertex will be added to.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs">
            <summary>
            This is the event arguments for the OverlaysDrawn event on the MapEngine class. It
            is raised after the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlaysDrawn event on the MapEngine class. It
            is raised after the overlays are drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay},ThinkGeo.MapSuite.Core.RectangleShape,System.Object)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlays drawn, the world extent and
            the image you have drawn on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlays">This parameter is the overlays that have been drawn.</param>
            <param name="worldExtent">This parameter is the wold extent that has been drawn.</param>
            <param name="nativeImage">This parameter is the GeoImage or native map image.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs.WorldExtent">
            <summary>This property gets and sets the world extent that has been drawn.</summary>
            <value>This property gets the world extent that has been drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs.NativeImage">
            <summary>
            This property gets and sets the GeoImage or native image we have drawn
            on.
            </summary>
            <value>This property gets the GeoImage or native image we have drawn on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs.Overlays">
            <summary>This property gets the overlays you have drawn.</summary>
            <value>This property gets the overlays you have drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.Overlay,ThinkGeo.MapSuite.Core.GeoCanvas,System.Boolean)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlay to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlay">This parameter is the overlay that will be drawn.</param>
            <param name="canvas">This parameter is the GeoCanvas we are drawing on.</param>
            <param name="cancel">This parameter specifies whether or not we will cancel drawing of the overlay.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs.Canvas">
            <summary>
            This property gets and sets the GeoCanvas we are drawing
            on.
            </summary>
            <value>This property gets the GeoCanvas we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs.Overlay">
            <summary>This property gets and sets the overlay you will be drawing.</summary>
            <value>This property gets the overlay you will be drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay">
            <summary>
            This class is used in Desktop Edition to access the WMS Server.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.#ctor">
            <summary>
            This is the constructor of the class.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use, otherwise it will
            use their default values.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.#ctor(System.Uri)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMS Serer you are consuming</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.#ctor(System.Uri,System.Net.WebProxy)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMS Serer you are consuming</param>
            <param name="webProxy">Proxy to use for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.#ctor(System.Uri,System.String,System.String)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMS Serer you are consuming</param>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.#ctor(System.Uri,System.Net.WebProxy,System.String,System.String)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="serverUri">The URI of WMS Serer you are consuming</param>
            <param name="webProxy">Proxy to use for the WMS Server.</param>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.ClearCache">
            <summary>
            This method will clear the cache for the Overlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.DrawExceptionCore(ThinkGeo.MapSuite.Core.GeoCanvas,System.Exception)">
            <summary>
            This method will draw on the canvas when the layer.Draw throw exception and 
            the DrawExceptionMode is set to DrawException instead of ThrowException.
            </summary>
            <param name="canvas">The target canvas to draw the layer.</param>
            <param name="e">The exception thrown when layer.Draw().</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.ClientId">
            <summary>
            Gets or sets a value that is your Client Id.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.PrivateKey">
            <summary>
            Gets or sets a value that is unique to your client ID, please keep your key secure.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.ActiveLayerNames">
            <summary>
            This property represents the available layers that can be requested from the client and shown on the map.
            </summary>
            <remarks>When requesting a map, a client may specify the layers to be shown on the map.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.ActiveStyleNames">
            <summary>
            This property represents the available styles that can be requested from the client and shown on the map.
            </summary>
            <remarks>When requesting a map, a client may specify the styles to be shown on the map.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.Parameters">
            <summary>
            This property specifies a dictionary used to update the request sent from the client to
            the WMS server.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.TileCache">
            <summary>
            Gets or sets the BitmapTileCache for the Overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TiledWmsOverlay.ServerUri">
            <summary>
            This property specifies the URI of the WMS server.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs">
            <summary>
            This class represents the MarkerDragging event argument for SimpleMarkerOverlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.#ctor">
            <summary>
            Constructor of MarkerDraggingSimpleMarkerOverlayEventArgs class.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.Marker,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>
            Constructor of MarkerDraggingSimpleMarkerOverlayEventArgs class.
            </summary>
            <param name="marker">This parameter indicates the marker which is being dragged.</param>
            <param name="worldCoordinate">This parameter indicates current mouse position in world coordinate.</param>
            <param name="currentLocation">This parameter indicates current mouse position in screen coordinate.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerDraggingSimpleMarkerOverlayEventArgs.CurrentLocation">
            <summary>
            Gets or sets current mouse position in screen coordinate.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MarkerDragMode">
            <summary>
            This enumeration specifies how the map markers can be dragged.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MarkerDragMode.None">
            <summary>
            Specifies that the markers cannot be dragged.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MarkerDragMode.Drag">
            <summary>
            Specifies that the markers can be dragged.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MarkerDragMode.CopyWithShiftKey">
            <summary>
            Specifies that the markers can be dragged to copy with shift key.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.SessionFileBitmapTileCache">
            <summary>
            This class is a concrete class that inherits from FileBitmapTileCache.
            In this class, the tiles will be marked as obsolete when you call the ClearCache method
            and will be deleted in a background thread.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.SessionFileBitmapTileCache.#ctor">
            <summary>
            This is the default constructor.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.SessionFileBitmapTileCache.#ctor(System.String)">
            <summary>
            This is the overloads constructor.
            </summary>
            <param name="cacheDirectory">This parameter specifies the directory of the tile cache.</param>
            <remarks>If you use this constructor, the other properties are set with default values.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.SessionFileBitmapTileCache.#ctor(System.String,System.String)">
            <summary>
            This is the overloads constructor.
            </summary>
            <param name="cacheDirectory">This parameter specifies the directory of the tile cache.</param>
            <param name="cacheId">This parameter specifies the cache ID of the tile cache.</param>
            <remarks>If you use this constructor, the other properties are set with default values.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.SessionFileBitmapTileCache.#ctor(System.String,System.String,ThinkGeo.MapSuite.Core.TileImageFormat,ThinkGeo.MapSuite.Core.TileMatrix)">
            <summary>
            This is the constructor with all the parameters needed passed in.
            </summary>
            <param name="cacheDirectory">This parameter specifies the directory of the tile cache.</param>
            <param name="cacheId">This parameter specifies the cache IF of the tile cache.</param>
            <param name="imageFormat">This parameter specifies the image format of the tile cahce.</param>
            <param name="tileMatrix">This parameter specifies the tile matrix of the tile cache.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.SessionFileBitmapTileCache.ClearCacheCore">
            <summary>
            This method will create a new cacheId for the SessionFileBitmapTileCache and mark
            the original one as obsolete.  The original will then be deleted in a background thread.
            </summary>
            <remarks>This method will not take effect when ReadOnly is set to true.</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapKeyDownInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapKeyDown">MapKeyDown</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapKeyDownInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapKeyDownInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.KeyEventInteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction arguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapKeyDownInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureRotated">FeatureRotated</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="rotatedFeature">This parameter specifies the feature rotated.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureRotatedEditInteractiveOverlayEventArgs.RotatedFeature">
            <summary>
            This property gets or sets the Feature rotated.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseMoveInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseMove">MapMouseMove</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseMoveInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseMoveInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specifies the interaction arguments used to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapMouseMoveInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the mouse click event args.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.BingMapsOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentExtentChanged">CurrentExtentChanged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentExtentChangedEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentExtentChangedEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single)">
            <overloads>Initialize an instance of the CurrentExtentChangedEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentExtentChangedEventArgs class by passing 
            the currentExtent, mapUnit, mapWidth and mapHeight.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseWheel">MapMouseWheel</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specifies the interaction arguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapMouseWheelInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments">
            <summary>
            This class encapsulates the information and simple method for interative actions.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set its properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.ToString">
            <summary>
            Overrides the ToString API for an object.
            </summary>
            <returns>Returns a string to mark this instance, making it easy to read its properties.</returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.ScreenX">
            <summary>
            This property gets or sets the screen X position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.ScreenY">
            <summary>
            This property gets or sets the screen Y position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.WorldX">
            <summary>
            This property gets or sets the world X position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.WorldY">
            <summary>
            This property gets or sets the world Y position.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.MouseButton">
            <summary>
            This property gets or sets the MouseButton used for the interative action.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.CurrentExtent">
            <summary>
            This property gets or sets the current extent used in the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.SearchingTolerance">
            <summary>
            This property gets or sets the search tolearance for tracking and editing.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.MapWidth">
            <summary>
            This property gets or sets the width for the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.MapHeight">
            <summary>
            This property gets or sets the height for the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.MapUnit">
            <summary>
            This property gets or sets the geographic unit for the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.ZoomLevelSet">
            <summary>
            This property gets or sets the ZoomLevelSet used in the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.ZoomLevelSnapping">
            <summary>
            This property gets or sets the ZoomLevelSnappingMode used in the Map Control.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.MouseWheelDelta">
            <summary>
            This property gets or sets the mouse wheel delta used in the MouseWheel method in InterativeOverlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.Scale">
            <summary>
            This property gets or sets the scale in the current status.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.InteractionArguments.ExtendedProperties">
            <summary>
            This property gets the extended properties in the current status.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.CanOnlyUsedInRunTime">
            <summary>
              Looks up a localized string similar to This assembly can only be used in RunTime..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.CheckTileIsValid">
            <summary>
              Looks up a localized string similar to The tile width and tile height cannot be 0..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.DefaultAndCustomOverlayDuplicate">
            <summary>
              Looks up a localized string similar to If you use the CustomOverlays collection you may not at the same time use the following properties:  StaticOverlay, DynamicOverlay.  CustomOverlays was designed to replace these so that you can implement as many overlays as you need in any order.  Trying to use CustomerOverlays and one of the properties above is not allowed as there is not a definitive logical order we could draw them in.  Please reference to the documentation of CustomOverlays property for more information..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.DoubleOutOfRange">
            <summary>
              Looks up a localized string similar to The input double value is out of range..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.EnumerationOutOfRange">
            <summary>
              Looks up a localized string similar to The value for the enumeration is not on of the valid values..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.EvalNotInstall">
            <summary>
              Looks up a localized string similar to The Map Suite Desktop evaluation edition has not been installed on the machine, please go to Map Suite Product Center to start evaluation or activate it..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.EvaluationExpired">
            <summary>
              Looks up a localized string similar to The Map Suite Desktop evaluation edition has expired.  Please go to Map Suite Product Center or contact ThinkGeo for purchasing option or an extension to the trial..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.EvaluationNotInstall">
            <summary>
              Looks up a localized string similar to The Map Suite Desktop evaluation edition has not been installed on the machine, please go to Map Suite Product Center to start evaluation or activate it..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.GeocanvasIsNotInDrawing">
            <summary>
              Looks up a localized string similar to The GeoCanvas is currently not drawing.  Please call the BeginDraw method before calling this method..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.IllegalCrossThreadCall">
            <summary>
              Looks up a localized string similar to Cross-thread operation not valid: Control &apos;{0}&apos; accessed from a thread other than the thread it was created on..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.MapUnitIsInvalidForOperation">
            <summary>
              Looks up a localized string similar to MapUnit is invalid for operation, please set MapUnit property firs before you do any operation..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.MaximumScaleShouldBiggerThanMinimumScale">
            <summary>
              Looks up a localized string similar to MaximumScale value should be bigger than MinimumScale..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.MinimumScaleShouldSmallerThanMaximumScale">
            <summary>
              Looks up a localized string similar to MinimumScale value should be smaller than MaximumScale..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.MustBeEncryptFileBitmapTileCache">
            <summary>
              Looks up a localized string similar to The value of the TileCache must be EncryptFileBitmapTileCache..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.ParameterIsEmpty">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be empty..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.ParameterIsNull">
            <summary>
              Looks up a localized string similar to The parameter you supplied may not be null..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.ScaleOutOfRange">
            <summary>
              Looks up a localized string similar to The scale was too small or too large, please set the MinimumScale or MaximumScale!.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.ScaleValueSouldBetweenMinimumScaleAndMaximumScale">
            <summary>
              Looks up a localized string similar to Scale value sould between MinimumScale and MaximumScale..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.ShapeIsInvalidForOperation">
            <summary>
              Looks up a localized string similar to The shape you provided does not pass our simple validation..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.TheValueShouldBeGreaterThanOrEqualToZero">
            <summary>
              Looks up a localized string similar to The value should be great than or equal to 0..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.TheValueShouldBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The value should be greater than zero..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.Unlicensed">
            <summary>
              Looks up a localized string similar to Unlicensed..
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.ExceptionDescription.VerifyAccess">
            <summary>
              Looks up a localized string similar to The calling thread cannot access this object because a different thread owns it..
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentScaleChanging">CurrentScaleChanging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentScaleChangingEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentScaleChangingEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,System.Double,ThinkGeo.MapSuite.Core.GeographyUnit,System.Int32,System.Int32,System.Boolean)">
            <overloads>Initialize an instance of the CurrentScaleChangingEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentScaleChangingEventArgs class by passing 
            the currentScale, mapUnit, mapWidth and mapHeight.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.CurrentScale">
            <summary>
            This property specifies the CurrentScale of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.NewScale">
            <summary>
            This property specifies the NewScale of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlaysDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlaysDrawing event on the MapEngine class. It
            is raised before any of the overlays are drawn. This event allows you to cancel, manipulate the
            Layer, or draw something with the canvas before the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs.#ctor(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay},ThinkGeo.MapSuite.Core.RectangleShape,System.Object,System.Boolean)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlays to be drawn, the world extent and
            the image you are drawing on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlays">This parameter is the overlays that will be drawing.</param>
            <param name="worldExtent">This parameter is the wold extent you are drawing.</param>
            <param name="nativeImage">This parameter is the native map image.</param>
            <param name="cancel">This parameter specifies whether we need to cancel drawing the overlays or not.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs.WorldExtent">
            <summary>This property gets and sets the world extent to draw.</summary>
            <value>This property gets the world extent to draw.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs.NativeImage">
            <summary>
            This property gets and sets the GeoImage or native image we are drawing
            on.
            </summary>
            <value>This property gets the GeoImage or native image we are drawing on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWpfMapEventArgs.Overlays">
            <summary>This property gets the overlays you will be drawing.</summary>
            <value>This property gets the overlays you will be drawing.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWpfMapEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the overlays are drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWpfMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.Overlay,ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlay drawn, the world extent and
            the image you have drawn on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlay">This parameter is the overlay that has been drawn.</param>
            <param name="canvas">This parameter is the GeoCanvas that has been drawn on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWpfMapEventArgs.Canvas">
            <summary>
            This property gets and sets the GeoCanvas we have drawn
            on.
            </summary>
            <value>This property gets the GeoCanvas we have drawn on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWpfMapEventArgs.Overlay">
            <summary>This property gets and sets the overlay you have drawn.</summary>
            <value>This property gets the overlay you have drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TilesExistingType">
            <summary>
            This enumeration specifies the existence status for the current extent tiles.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TilesExistingType.NoneExisting">
            <summary>
            No tiles exist.  Rendering of tiles to the screen will be skipped.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TilesExistingType.PartExisting">
            <summary>
            Some of the tiles exist and will be rendered to the screen; other areas will be submitted for drawing.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.TilesExistingType.AllExisting">
            <summary>
            All tiles exist and will be rendered to screen; none will be submitted for drawing.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType">
            <summary>
            This enumeration specifies the type of extent change that has occurred
            when doing interactive actions with InterativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.None">
            <summary>
            Default value for enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.Pan">
            <summary>
            This enumeration item represents panning action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.TrackZoomIn">
            <summary>
            This enumeration item represents track zoom in action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.TrackZoomOut">
            <summary>
            This enumeration item represents track zoom out action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.DoubleClickZoomIn">
            <summary>
            This enumeration item represents double-click zoom in action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.DoubleClickZoomOut">
            <summary>
            This enumeration item represents double-click zoom out action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.MouseWheelZoomIn">
            <summary>
            This enumeration item represents mouse wheel zoom in action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.ExtentChangedType.MouseWheelZoomOut">
            <summary>
            This enumeration item represents mouse wheel zoom out action for the extent interativeOverlay.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.WinformsMap">
            <summary>The Map Control used to develop a Winforms application.</summary>
            <remarks>
            	<para>It is very important that the property <strong>MapUnit</strong> is set
                properly according to the unit of the data (Layers) represented in it. The
                <strong>MapUnit</strong> will allow the scale, distance and area calulations to
                work properly. In the vast majority of cases, the MapUnit will be DecimalDegrees,
                Meters or Feet; the default <strong>MapUnit</strong> is DecimalDegrees. A Map has an
                <strong>Overlays</strong> property used to set a group of <strong>Overlays</strong> (which can
                be thought as a group of data), or you can have your own overlays if you want to
                customize the overlays. To refresh the entire map, use the <strong>Refresh</strong>
                method. To refresh only one particular Overlay, use the <strong>Redraw</strong> method.
                There are two ways to control the Map: One way is to react to the user's mouse and
                keyboard (i.e., Shift when TrackZoomIn) actions, and the other way is to use the API provided by
                the Map Control to change the <strong>CurrentExtent</strong> and then
                <strong>Refresh or Redraw</strong> the Map.</para>
            </remarks>
            <example>
            	<code lang="CS" title="C# sample">
            		<![CDATA[
            winformsMap1.MapUnit = GeographyUnit.DecimalDegree;
            winformsMap1.MapBackground.BackgroundLayer = new BackgroundLayer(new GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean));
             
            ShapeFileFeatureLayer worldLayer = new ShapeFileFeatureLayer(@"..\..\SampleData\Data\Countries02.shp");
            worldLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = AreaStyles.Country1;
            worldLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20;
             
            LayerOverlay staticOverlay = new LayerOverlay();
            staticOverlay.Layers.Add("WorldLayer", worldLayer); 
            winformsMap1.Overlays.Add(staticOverlay);
             
            winformsMap1.CurrentExtent = new RectangleShape(-143.4, 109.3, 116.7, -76.3);
             
            winformsMap1.Refresh();]]>
            	</code>
            	<code lang="VB">
            		<![CDATA[
            winformsMap1.MapUnit = GeographyUnit.DecimalDegree
            winformsMap1.MapBackground.BackgroundLayer = New BackgroundLayer(New GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean))
             
            Dim worldLayer As New ShapeFileFeatureLayer("..\..\SampleData\Data\Countries02.shp")
            worldLayer.ZoomLevelSet.ZoomLevel01.DefaultAreaStyle = AreaStyles.Country1
            worldLayer.ZoomLevelSet.ZoomLevel01.ApplyUntilZoomLevel = ApplyUntilZoomLevel.Level20
             
            Dim staticOverlay As New LayerOverlay()
            staticOverlay.Layers.Add("WorldLayer", worldLayer)
            winformsMap1.Overlays.Add(staticOverlay)
             
            winformsMap1.CurrentExtent = New RectangleShape(-143.4, 109.3, 116.7, -76.3)
             
            winformsMap1.Refresh()]]>
            	</code>
            </example>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.#ctor">
            <summary>Constructor of the Winform MapControl.</summary>
            <remarks>In this constructor, we will initialize some class modular variables and hook up some events.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnMapClick(ThinkGeo.MapSuite.DesktopEdition.MapClickWinformsMapEventArgs)">
            <summary>
            This event is raised when clicking on the Map without any mouse movement (dragging).
            </summary>
            <param name="e">The WinformsMapClickEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnOverlaysDrawing(ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawingWinformsMapEventArgs)">
            <summary>
            This event will be fired before the Overlays are drawn.
            </summary>
            <param name="e">The OverlaysDrawingEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnOverlaysDrawn(ThinkGeo.MapSuite.DesktopEdition.OverlaysDrawnWinformsMapEventArgs)">
            <summary>
            This event will be fired after the Overlays have been drawn.
            </summary>
            <param name="e">The OverlaysDrawingEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnOverlayDrawing(ThinkGeo.MapSuite.DesktopEdition.OverlayDrawingWinformsMapEventArgs)">
            <summary>
            This event will be fired before the Overlay is drawn.
            </summary>
            <param name="e">The OverlayDrawingEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnOverlayDrawn(ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWinformsMapEventArgs)">
            <summary>
            This event will be fired after the Overlay has been drawn.
            </summary>
            <param name="e">The OverlayDrawingEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnCurrentScaleChanged(ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangedWinformsMapEventArgs)">
            <summary>
            Raised when the CurrentScale of the map changes.
            </summary>
            <param name="e">The CurrentScaleChangedEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnCurrentExtentChanged(ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs)">
            <summary>
            Raised when the CurrentExtent of the map changes.
            </summary>
            <param name="e">The CurrentExtentChangedEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnCurrentScaleChanging(ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWinformsMapEventArgs)">
            <summary>
            Raised before the CurrentScale of the map changes.
            </summary>
            <param name="e">The CurrentScaleChangingEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnCurrentExtentChanging(ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangingWinformsMapEventArgs)">
            <summary>
            Raised before the CurrentExtent of the map changes.
            </summary>
            <param name="e">The CurrentExtentChangingEventArgs passed for the event raised.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomIn(System.Int32)">
            <summary>
            This method will zoom in the currentExtent by the percentage provided.
            </summary>
            <returns>
            None
            </returns>
            <remarks>None</remarks>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.Feature)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in and the centerFeature you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="centerFeature">This parameter is the feature you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in and the worldPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="worldPoint">This parameter is the world point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomIntoCenter(System.Int32,System.Single,System.Single)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in, as well as the screenPointX and screenPointY you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="screenX">This parameter is the screen X you want to center on.</param>
            <param name="screenY">This parameter is the screen Y you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomIntoCenter(System.Int32,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This method will zoom in and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom in and the screenPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom in.</param>
            <param name="screenPoint">This parameter is the screen point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomOut(System.Int32)">
            <summary>
            This method will zoom out the currentExtent by the percentage provided.
            </summary>
            <returns>
            None
            </returns>
            <remarks>None</remarks>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.Feature)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out and the centerFeature you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="centerFeature">This parameter is the feature you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.PointShape)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out and the worldPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="worldPoint">This parameter is the world Point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomOutToCenter(System.Int32,System.Single,System.Single)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out, as well as the screenPointX and screenPointY you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="screenX">This parameter is the screen X you want to center on.</param>
            <param name="screenY">This parameter is the screen Y you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomOutToCenter(System.Int32,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This method will zoom out and center at the currentExtent.</summary>
            <remarks>
            None
            </remarks>
            <overloads>
            This overload allows you to pass in a percentage by which you want to zoom out and the screenPoint you want to center on.
            </overloads>
            <param name="percentage">This parameter is the percentage by which you want to zoom out.</param>
            <param name="screenPoint">This parameter is the screen Point you want to center on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomToScale(System.Double)">
            <summary>This method will zoom the currentExtent to the targetScale.</summary>
            <remarks>None</remarks>
            <param name="targetScale">This parameter is the scale you want to zoom to.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomToScale(System.Double,ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This method will zoom the currentExtent to the new TargetScale with a given offset Screen Point.</summary>
            <remarks>None</remarks>
            <param name="targetScale">This parameter is the scale you want to zoom to.</param>
            <param name="offsetScreenPoint">This parameter is the offset Screen Point.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomToScale(System.Double,System.Single,System.Single)">
            <summary>This method will zoom the currentExtent to the new TargetScale with a given offset in screen coordinates.</summary>
            <remarks>None</remarks>
            <param name="targetScale">This parameter is the scale you want to zoom to.</param>
            <param name="offsetScreenX">This parameter is the offsetScreen X.</param>
            <param name="offsetScreenY">This parameter is the offsetScreen Y.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Pan(System.Single,System.Int32)">
            <summary>This function will pan the currentExtent based on an angle and percentage.</summary>
            <overloads>This overload allows you to pass in an angle and a percentage by which you want to
            pan.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by panning according to the angle and percentage specified.</remarks>
            <param name="degree">This parameter is the degree (angle) in which you want to pan.</param>
            <param name="percentage">This parameter is the percentage by which you want to pan.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">
            This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.
            </exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Pan(ThinkGeo.MapSuite.Core.PanDirection,System.Int32)">
            <summary>This function will pan the currentExtent based on a direction and percentage.</summary>
            <overloads>This overload allows you to pass a degree and percentage.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by panning according to the direction and percentage specified.</remarks>
            <param name="panDirection">This parameter is the direction in which you want to pan.</param>
            <param name="percentage">This parameter is the percentage by which you want to pan.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">
            This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.
            </exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CenterAt(ThinkGeo.MapSuite.Core.Feature)">
            <summary>This function will center the currentExtent based on the specified center feature.</summary>
            <overloads>This overload allows you to pass in a feature as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the target centerFeature.</remarks>
            <param name="centerFeature">This parameter is the feature you want to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CenterAt(System.Single,System.Single)">
            <summary>This function will center the currentExtent based on the specified screenX and screenY.</summary>
            <overloads>This overload allows you to pass in a world point as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the screenX and screenY coordinates you provide.</remarks>
            <param name="screenX">This parameter is the screen X coordinate to center on.</param>
            <param name="screenY">This parameter is the screen Y coordinate to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CenterAt(ThinkGeo.MapSuite.Core.PointShape)">
            <summary>This function will center the currentExtent on the specified worldPoint.</summary>
            <overloads>This overload allows you to pass in a world pointShape as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the worldPoint you provide.</remarks>
            <param name="worldPoint">This parameter is the world point you want to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CenterAt(ThinkGeo.MapSuite.Core.ScreenPointF)">
            <summary>This function will center the currentExtent based on the specified screenPoint.</summary>
            <overloads>This overload allows you to pass in a screen point as the center.</overloads>
            <returns>None.</returns>
            <remarks>This method will change the current extent by centering on the screenPoint you provide.</remarks>
            <param name="screenPoint">This parameter is the screen point you want to center on.</param>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.GetVersion">
            <summary>
            This static method will be useful when you want to report a bug in a specified
            version of Map Suite. You can use it to tell ThinkGeo support which version you are trying to
            use.
            </summary>
            <returns>
            A string representing the version of the MapSuiteCore and Map Suite Desktop product that you are now
            using.
            </returns>
            <example>
            	<code lang="CS" title="C# sample" description="This code shows how to use this API to get the version of the Map Suite product you are using now.">
            string version = WinformsMap.GetVersion();
            </code>
            	<code lang="VB" title="VB sample" description="This code shows how to use this API to get the version of the Map Suite product you are using now.">
            Dim version As String = WinformsMap.GetVersion()
            </code>
            </example>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.FindFeatureLayer(System.String)">
            <summary>
            This method will search all overlays for a feature layer that has a given layer key.
            </summary>
            <returns>FeatureLayer with the specified key, or Null if nothing was found.</returns>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <exception cref="T:System.ArgumentNullException" caption="AugumentNullException">This exception will be thrown if you pass in Null as the key of the target FeatureLayer.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">This exception will be thrown if you pass in string.empty as the key of the target FeatureLayer.</exception>
            <param name="key">This parameter specifies the key for the returning feature layer.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.FindRasterLayer(System.String)">
            <summary>
            This method will search all overlays for a raster layer that has a given layer key.
            </summary>
            <returns>RasterLayer with the specified key, or Null if nothing was found.</returns>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <exception cref="T:System.ArgumentNullException" caption="AugumentNullException">This exception will be thrown if you pass in Null as the key of the target RasterLayer.</exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">This exception will be thrown if you pass in string.empty as the key of the RasterLayer.</exception>
            <param name="key">This parameter specifies the key for the returning raster layer.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomToPreviousExtent">
            <summary>Reverts the MapControl to the previous extent.</summary>
            <remarks>
            The MapControl keeps track of all of its previous extents so you can go back one (or
            more) any time you want.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ToggleMapExtents">
            <summary>
            Switch the MapControl's <strong>CurrentExtent</strong> between the current and
            previous extent.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Refresh">
            <summary>
            This API will refresh all of the overlays. This overload's logic is slightly different from
            other overloads in that it will clear the screen bitmaps and will not delete the tiles if they
            already exist.
            
            If you only want to refresh certain specified overlays, please use the other overloads and pass them into it.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Refresh(ThinkGeo.MapSuite.DesktopEdition.Overlay)">
            <summary>
            This API will refresh only one specified overlay. This overload has the same logic as the overloads that
            accept a group of overlays, but is different from overloads that do not accept parameters.
            
            It will delete any tiles that already exist for the specified overlay and will
            keep the screen bitmaps for other overlays.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Refresh(ThinkGeo.MapSuite.Core.RectangleShape)">
            <summary>
            This API will refresh only sepcified area. 
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Refresh(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.DesktopEdition.Overlay)">
            <summary>
            This API will refresh only sepcified area for one specified overlay. 
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Refresh(System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay})">
            <summary>
            This API will refresh only the specified overlays. This overload has the same logic as the overloads that
            accept a single specified overlay, but is different from overloads that do not accept parameters.
            
            It will delete any tiles that already exist for the specified overlays and will
            keep the screen bitmaps for other overlays.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Refresh(ThinkGeo.MapSuite.Core.RectangleShape,System.Collections.Generic.IEnumerable{ThinkGeo.MapSuite.DesktopEdition.Overlay})">
            <summary>
            This API will refresh the specified Area for the specified overlays.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method overrides the OnPaint API of the Canvas which the WinformsMap Control inherits from.
            </summary>
            <param name="e">The events args for the OnPaint API.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Dispose(System.Boolean)">
            <summary>
             Releases the unmanaged resources used by the Map Control
             and its child controls.  Optionally, releases the managed resources as well.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only
                unmanaged resources.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Dispose">
            <summary>
            Releases all resources used by the MapControl.
            </summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MapClick">
            <summary>This event will be fired when you click on the Map.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OverlaysDrawing">
            <summary>This event will be fired before all overlays are drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OverlaysDrawn">
            <summary>This event will be fired after all overlays are drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OverlayDrawing">
            <summary>This event will be fired before an overlay is drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.OverlayDrawn">
            <summary>This event will be fired after an overlay is drawn.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentExtentChanging">
            <summary>This event will be raised before the CurrentExtent of the Map changes.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentExtentChanged">
            <summary>This event will be raised after the CurrentExtent of the Map changes.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentScaleChanged">
            <summary>This event will be raised after the CurrentScale of the Map changes.</summary>
        </member>
        <member name="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentScaleChanging">
            <summary>This event will be raised before the CurrentScale of the Map changes.</summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.BackgroundOverlay">
            <summary>This property gets or sets the backgournd overlay.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to use the BackgroundOverlay.">
            winformsMap1.BackgroundOverlay.BackgroundBrush = new GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to use the BackgroundOverlay.">
            winformsMap1.BackgroundOverlay.BackgroundBrush = New GeoSolidBrush(GeoColor.GeographicColors.ShallowOcean)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.AdornmentOverlay">
            <summary>This property gets or sets the adornment overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to add a ScaleLine AdornmentLayer to the MapControl.">
            ScaleLineAdornmentLayer scaleLineAdornmentLayer = new ScaleLineAdornmentLayer();
            winformsMap1.AdornmentOverlay.Layers.Add("ScaleLineAdornmentLayer", scaleLineAdornmentLayer);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to add a ScaleLine AdornmentLayer to the MapControl.">
            Dim scaleLineAdornmentLayer As New ScaleLineAdornmentLayer()
            winformsMap1.AdornmentOverlay.Layers.Add("ScaleLineAdornmentLayer", scaleLineAdornmentLayer)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.EditOverlay">
            <summary>This property gets or sets the edit overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows you one way to delete the single last shape in the EditShapesLayer contained in the EditOverlay.">
            	case "btnTrackDelete":
            	        int lastIndex = winformsMap1.EditOverlay.EditShapesLayer.InternalFeatures.Count - 1;
            	        if (lastIndex &gt;= 0)
            	        {
            	            winformsMap1.EditOverlay.EditShapesLayer.InternalFeatures.RemoveAt(lastIndex);
            	            winformsMap1.EditOverlay.CalculateAllControlPoints();
            	        }
            	        winformsMap1.Refresh(winformsMap1.EditOverlay);
            	        break;
                </code>
            	<code lang="VB" title="VB Sample" description="This code shows you one way to delete the single last shape in EditShapesLayer contained in the EditOverlay.">
                Case "btnTrackDelete"
                        Dim lastIndex As Integer = winformsMap1.EditOverlay.EditShapesLayer.InternalFeatures.Count - 1
                        If (lastIndex &gt;= 0) Then
                            winformsMap1.EditOverlay.EditShapesLayer.InternalFeatures.RemoveAt(lastIndex)
                            winformsMap1.EditOverlay.CalculateAllControlPoints()
                        End If
                        winformsMap1.Refresh(winformsMap1.EditOverlay)
                        Exit Select
                </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.TrackOverlay">
            <summary>This property gets or sets the track overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to change the TrackMode of the MapControl to Track an ellipse out.">
             winformsMap1.TrackOverlay.TrackMode = TrackMode.Ellipse;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to change the TrackMode of the MapControl to Track an ellipse out.">
             winformsMap1.TrackOverlay.TrackMode = TrackMode.Ellipse
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ExtentOverlay">
            <summary>This property gets or sets the extent overlay in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.InteractiveOverlays">
            <summary>This property gets the collection of InterativeOverlays in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <remarks>This property is used when you want to change the default behavior of the InteractiveOverlay or add your own
            customized InteractiveOverlay.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.Overlays">
            <summary>This property gets the collection of Overlays in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to add an overlay to the Overlays collection.">
             LayerOverlay staticOverlay = new LayerOverlay();
             staticOverlay.Layers.Add("WorldLayer", worldLayer);
             winformsMap1.Overlays.Add("WorldOverlay", staticOverlay);
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to add an overlay to the Overlays collection.">
             Dim staticOverlay As New LayerOverlay()
             staticOverlay.Layers.Add("WorldLayer", worldLayer)
             winformsMap1.Overlays.Add(staticOverlay)
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MapUnit">
            <summary>This property gets or sets the map unit used by the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to set the MapUnit.">
             winformsMap1.MapUnit = GeographyUnit.Meter;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to set the MapUnit.">
             winformsMap1.MapUnit = GeographyUnit.Meter 
            </code>
            </example>
            <remarks>The MapUnit reflects the data unit.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomLevelSnapping">
            <summary>This property gets or sets the ZoomLevelSnappingMode in the MapControl.</summary>
            <exception cref="T:System.InvalidOperationException" caption="InvalidOperationException">This InvalidOperationException exception will be thrown when you get or set the property in another thread instead of the thread that created the WinformsMap.</exception>
            <example>
            	<code lang="CS" title="C# Sample" description="This code shows how to set the ZoomLevelSnappingMode.">
             winformsMap1.ZoomLevelSnappingMode = ZoomLevelSnappingMode.SnapUp;
            </code>
            	<code lang="VB" title="VB Sample" description="This code shows how to set the ZoomLevelSnappingMode.">
             winformsMap1.ZoomLevelSnappingMode = ZoomLevelSnappingMode.SnapUp 
            </code>
            </example>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentScale">
            <summary>Gets or sets the current scale of the MapControl.</summary>
            <remarks>
            When you set the scale, the <strong>CurrentExtent</strong> will change, but the
            center of the <strong>CurrentExtent</strong> stays the same.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentExtent">
            <summary>
            Gets or sets the current extent of the MapControl.
            </summary>
            <remarks>The current extent represents the extent of the map's current position.  This is 
            a very important metric used to calculate the map's scale.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.RestrictedExtent">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ZoomLevelSet">
            <summary>
            This property gets or sets the <strong>ZoomLevelSet</strong> used for the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MapResizeMode">
            <summary>
            This property gets or sets the <strong>MapResizeMode</strong> to be used
            when resizing the MapControl.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MinimumScale">
            <summary>
            This property gets or sets the MinimumScale your MapControl can zoom into when 
            your ZoomLevelSnappingMode is set to None.
            </summary>
            <remarks>If your ZoomLevelSnappingMode is set to either Default or SnapUp, the minimum scale 
            you can zoom into will always be the minimum level from the 20 preset scales.  If the
            MinimumScale value you set here is larger than the smallest scale available in the preset
            scales, the next preset that is larger than your MinimumScale will be chosen.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MaximumScale">
            <summary>
            This property will gets or sets the MaximumScale your MapControl can zoom out to when 
            your ZoomLevelSnappingMode is set to None.
            </summary>
            <remarks>If your ZoomLevelSnappingMode is set to Default or SnapUp, the maximum scale 
            you can zoom out to will always be the maximum level from the 20 preset scales.  If the
            MaximumScale value you set here is larger than the largest scale available in the preset
            scales, the next preset that is smaller than your MaximumScale will be chosen.</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.ThreadingMode">
            <summary>
            This property gets or sets the ThreadingMode used in the MapControl.
            </summary>
            <remarks> 
            Currently, we provide two different ThreadingModes: single-threaded mode and multi-threaded mode.
            The major difference for multi-threaded mode is that the drawing logic for overlays is done in another thread
            instead of the main thread.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.SmoothingMode">
            <summary>
            This property returns or sets the rendering quality for the drawing
            canvas.
            </summary>
            <remarks>
            	<para>This property is used for GDI+ drawing. The explanation below is from the GDI+
                documentation.</para>
            	<para></para>
            	<para>The smoothing mode specifies whether lines, curves, and the edges of filled
                areas use smoothing (also called antialiasing). One exception is that path gradient
                brushes does not obey the smoothing mode. Areas filled using a PathGradientBrush
                are rendered the same way (aliased) regardless of the SmoothingMode property.</para>
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.TextRenderingHint">
            <summary>
            This property returns or sets the rendering mode for text associated with this
            GeoCanvas.
            </summary>
            <remarks>
            	<para>This property is used for GDI+ drawing. The explanation below is form the GDI+
                documentation.<br/>
            		<br/>
                The text rendering hint specifies whether text renders with antialiasing.</para>
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CompositingQuality">
            <summary>This property returns or sets the quality level to use during compositing.</summary>
            <remarks>
            	<para>This property is used for GDI+ drawing. The explanation below is form the GDI+
                documentation<br/>
                <br/>
                Compositing is done during rendering when the source pixels are
                combined with the destination pixels to produce the resultant pixels. The quality
                of compositing directly relates to the visual quality of the output and is
                inversely proportional to the render time. The higher the quality, the slower the
                render time. This is because the higher the quality level, the more surrounding
                pixels need to be taken into account during the composite. The linear quality
                setting (AssumeLinear) compromises by providing better quality than the default
                quality at a slightly lower speed.</para>
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.DrawingQuality">
            <summary>This property returns the drawing quality when rendering on the GeoCanvas.</summary>
            <remarks>
            The DrawingQuality specifies if BaseLineShapes, BasePointShapes, and
            BaseAreaShapes use anti-alias methods or other techniques that control the quality. In
            some cases you may want a higher quality rendering and in other cases higher speed is
            more desirable. It is up to the implementer of the derived GeoCanvas class to control
            exactly what this setting means.
            </remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.MapFocusMode">
            <summary>
            This property gets or sets the <strong>MapFocusMode</strong> for the MapControl
            when dealing with the issue of the map taking focus.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseDownInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseDown">MapMouseDown</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseDownInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseDownInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specified the interaction arguments to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapMouseDownInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.InteractiveOverlay.MapMouseDoubleClick">MapMouseDoubleClick</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.InteractionArguments)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="interactionArguments">This parameter specifies the interaction arguments used to construct the class.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MapMouseDoubleClickInteractiveOverlayEventArgs.InteractionArguments">
            <summary>
            This property gets the interaction arguments for the event args.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapDoubleRightClickMode">
            <summary>
            This enumeration specifies the behavior that occurs when double-right-clicking on the MapControl.
            The default value is ZoomOut.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapDoubleRightClickMode.Default">
            <summary>
            Default value (ZoomOut) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapDoubleRightClickMode.ZoomOut">
            <summary>
            This enumeration item means that the map will ZoomOut when a double-right-click occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapDoubleRightClickMode.Disabled">
            <summary>
            This enumeration item means that the ZoomOut functionality for double-right-clicks will be disabled.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexRemoved">VertexRemoved</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="removedVertex">This parameter specifies the target vertex removed.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            This property gets or sets the Feature from which the vertex was removed.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexRemovedEditInteractiveOverlayEventArgs.RemovedVertex">
            <summary>
            This property gets or sets the vertex removed.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.VertexAddedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.VertexAdded">VertexAdded</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature,ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="affectedVertexFeature">This parameter specifies the affectedVertex feature property.</param>
            <param name="addedVertex">This parameter specifies the target vertex added.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.AffectedVertexFeature">
            <summary>
            This property gets or sets the Feature the vertex was added to.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.VertexAddedEditInteractiveOverlayEventArgs.AddedVertex">
            <summary>
            This property gets or sets the vertex added.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.EditInteractiveOverlay.FeatureDragged">FeatureDragged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Feature)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="draggedFeature">This parameter specifies the feature dragged.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.FeatureDraggedEditInteractiveOverlayEventArgs.DraggedFeature">
            <summary>
            This property gets or sets the Feature dragged.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackStarting">TrackStarting</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex,System.Boolean)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="startingVertex">This parameter specifies the starting vertex used when the tracking shape action is being started.</param>
            <param name="cancel">This parameter specifies the cancel property.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackStartingTrackInteractiveOverlayEventArgs.StartingVertex">
            <summary>
            This property gets or sets the starting vertex used when the tracking shape action is being started.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WinformsMap.CurrentExtentChanged">CurrentExtentChanged</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentExtentChangedEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentExtentChangedEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,ThinkGeo.MapSuite.Core.GeographyUnit,System.Int32,System.Int32)">
            <overloads>Initialize an instance of the CurrentExtentChangedEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentExtentChangedEventArgs class by passing 
            the currentExtent, mapUnit, mapWidth and mapHeight.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentExtentChangedWinformsMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay">
            <summary>
            This class is used in Desktop Edition to access the WorldMapKit Web Map Service (WMS).
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.#ctor">
            <summary>
            This is the constructor of the class.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use, otherwise it will
            use their default values.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.#ctor(System.String,System.String)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.#ctor(System.Net.WebProxy,System.String,System.String)">
            <summary>
            This is the constructor of the class.
            </summary>
            <param name="webProxy">Proxy to use for the WMS Server.</param>
            <param name="clientId">The clientId for the WMS Server.</param>
            <param name="privateKey">The privateKey for the WMS Server.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.ClearCache">
            <summary>
            This method will clear the cache for the Overlay.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.DrawPreviewCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>
            This method overrides its DrawPreviewCore virtual method in its base class Overlay.
            </summary>
            <param name="canvas">This parameter is the canvas object to draw on.</param>
            <returns>The tile existing type, which indicates whether any tiles exist.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the WorldMapKitDesktopOverlay.</summary>
            <remarks>
             This method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.DrawExceptionCore(ThinkGeo.MapSuite.Core.GeoCanvas,System.Exception)">
            <summary>
            This method will draw on the canvas when the layer.Draw throw exception and 
            the DrawExceptionMode is set to DrawException instead of ThrowException.
            </summary>
            <param name="canvas">The target canvas to draw the layer.</param>
            <param name="e">The exception thrown when layer.Draw().</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.ClientId">
            <summary>
            Gets or sets a value that is your Client Id.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.PrivateKey">
            <summary>
            Gets or sets a value that is unique to your client ID, please keep your key secure.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.Projection">
            <summary>
            Gets or sets the Projection of the Overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.TileCache">
            <summary>
            Gets or sets the BitmapTileCache for the Overlay.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.WorldMapKitWmsDesktopOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet">
            <summary>
            This class represents a collection of MarkerZoomLevel that determines the
            appearance of markers at different zoomlevels.
            </summary>
            <remarks>
            	<para>This class represents a collection of <strong>MarkerZoomLevel</strong>. Each
                <strong>MarkerZoomLevel</strong> has a different scale and style definition which
                will be applied to markers when it is the current zoomlevel.</para>
            	<para>The MarkerZoomLevelSet decides which zoomlevel applys its styles to the
                markers base on the current zoomlevel.</para>
            	<para>If current zoomlevel is level 03 and we defined the styles on zoomlevel as
                below:</para>
            	<para>markerOverlay.ZoomLevelSet.ZoomLevel04.DefaultMarkerStyle.WebImage = ...;
                markerOverlay.ZoomLevelSet.ZoomLevel04.DefaultMarkerStyle.Popup = ...;
                markerOverlay.ZoomLevelSet.ZoomLevel04.ApplyUntilZoomLevel =
                ApplyUntilZoomLevel.Level10;</para>
            	<para>then no zoomlevel will apply styles to the markers. There will be no markers
                display on the screen.</para>
            	<para>When we change the current zoomlevel to level 04, now current zoomlevel falls
                into the zoomlevel range (04-10) that defines styles. The ZoomlevelSet will apply
                the styles on the zoomlevel 04 to the markers.</para>
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.#ctor">
            <summary>Initialize a new instance of the MarkerZoomLevelSet class.</summary>
            <returns>A new instance of the WebZoomLevelSet class.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.SelectZoomLevelById(System.Int32)">
            <summary>Select MarkerZoomLevel instance by its id.</summary>
            <param name="id">parameter can be 1 - 20.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.GetZoomLevelForDrawing(System.Int32)">
            <summary>
            Returns the MarkerZoomLevel object whose styles will be applies to the markers
            base on the current zoomlevel that passed in.
            </summary>
            <param name="currentZoomLevelId">
            An int value that indicates which zoomlevel is the current zoomlevel. The int
            value can only be in 1-20.
            </param>
            <returns>
            The MarkerZoomLevel object whose styles will be applies to the markers
            base on the current zoomlevel that passed in.
            </returns>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel01">
            <summary>Gets the MarkerZoomLevel for Level01.</summary>
            <value>A MarkerZoomLevel object which represents the Level01.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel02">
            <summary>Gets the MarkerZoomLevel for Level02.</summary>
            <value>A MarkerZoomLevel object which represents the Level02.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel03">
            <summary>Gets the MarkerZoomLevel for Level03.</summary>
            <value>A MarkerZoomLevel object which represents the Level03.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel04">
            <summary>Gets the MarkerZoomLevel for Level04.</summary>
            <value>A MarkerZoomLevel object which represents the Level04.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel05">
            <summary>Gets the MarkerZoomLevel for Level05.</summary>
            <value>A MarkerZoomLevel object which represents the Level05.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel06">
            <summary>Gets the MarkerZoomLevel for Level06.</summary>
            <value>A MarkerZoomLevel object which represents the Level06.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel07">
            <summary>Gets the MarkerZoomLevel for Level07.</summary>
            <value>A MarkerZoomLevel object which represents the Level07.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel08">
            <summary>Gets the MarkerZoomLevel for Level08.</summary>
            <value>A MarkerZoomLevel object which represents the Level08.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel09">
            <summary>Gets the MarkerZoomLevel for Level09.</summary>
            <value>A MarkerZoomLevel object which represents the Level09.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel10">
            <summary>Gets the MarkerZoomLevel for Level10.</summary>
            <value>A MarkerZoomLevel object which represents the Level10.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel11">
            <summary>Gets the MarkerZoomLevel for Level11.</summary>
            <value>A MarkerZoomLevel object which represents the Level11.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel12">
            <summary>Gets the MarkerZoomLevel for Level12.</summary>
            <value>A MarkerZoomLevel object which represents the Level12.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel13">
            <summary>Gets the MarkerZoomLevel for Level13.</summary>
            <value>A MarkerZoomLevel object which represents the Level13.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel14">
            <summary>Gets the MarkerZoomLevel for Level14.</summary>
            <value>A MarkerZoomLevel object which represents the Level14.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel15">
            <summary>Gets the MarkerZoomLevel for Level15.</summary>
            <value>A MarkerZoomLevel object which represents the Level15.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel16">
            <summary>Gets the MarkerZoomLevel for Level16.</summary>
            <value>A MarkerZoomLevel object which represents the Level16.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel17">
            <summary>Gets the MarkerZoomLevel for Level17.</summary>
            <value>A MarkerZoomLevel object which represents the Level17.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel18">
            <summary>Gets the MarkerZoomLevel for Level18.</summary>
            <value>A MarkerZoomLevel object which represents the Level18.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel19">
            <summary>Gets the MarkerZoomLevel for Level19.</summary>
            <value>A MarkerZoomLevel object which represents the Level19.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.ZoomLevel20">
            <summary>Gets the MarkerZoomLevel for Level20.</summary>
            <value>A MarkerZoomLevel object which represents the Level20.</value>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.MarkerZoomLevelSet.CustomZoomLevels">
            <summary>
            Gets a MarkerZoomLevel collection that is used for you to define your own custom
            zoomlevels.
            </summary>
            <remarks>
            	<para>When you add custom zoomlevels to the CustomZoomLevels collection, the
                default ZoomLevel01-20 will be disabled. The zoomLevels in the CustomZoomLevels are
                matched with the scales defined in the Map.ZoomLevelScales. For
                example,</para>
            	<para>CustomZoomLevels[0] has the scale that equals to
                Map.ClientZoomLevelScales[0].</para>
            </remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.WpfMap.CurrentScaleChanging">CurrentScaleChanging</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.#ctor">
            <summary>Initialize an instance of the CurrentScaleChangingEventArgs class.</summary>
            <overloads>Initialize an instance of the CurrentScaleChangingEventArgs class.</overloads>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.#ctor(ThinkGeo.MapSuite.Core.RectangleShape,System.Double,System.Double,ThinkGeo.MapSuite.Core.GeographyUnit,System.Single,System.Single,System.Boolean)">
            <overloads>Initialize an instance of the CurrentScaleChangingEventArgs class.</overloads>
            <summary>
            Initialize an instance of the CurrentScaleChangingEventArgs class by passing 
            the currentScale, mapUnit, mapWidth and mapHeight.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.CurrentScale">
            <summary>
            This property specifies the CurrentScale of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.NewScale">
            <summary>
            This property specifies the NewScale of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.MapUnit">
            <summary>
            This property specifies the MapUnit of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.MapWidth">
            <summary>
            This property specifies the MapWidth of the CurrentScaleChangingEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.MapHeight">
            <summary>
            This property specifies the MapHeight of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.CurrentExtent">
            <summary>
            This property specifies the CurrentExtent of the CurrentExtentChangedEventArgs.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.CurrentScaleChangingWpfMapEventArgs.Cancel">
            <summary>
            This property gets or sets whether the action will be canceled or not.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs">
            <summary>
                Provides data for the <see cref="E:ThinkGeo.MapSuite.DesktopEdition.TrackInteractiveOverlay.TrackStarted">TrackStarted</see>
                event.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs.#ctor">
            <summary>
            This is the default constructor of this parameter.
            </summary>
            <remarks>If you use this constructor, you must set the properties manually before use.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs.#ctor(ThinkGeo.MapSuite.Core.Vertex)">
            <summary>
            This is the commonly used constructor.
            </summary>
            <param name="startedVertex">This parameter specifies the start vertex once the tracking shape action has been started.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.TrackStartedTrackInteractiveOverlayEventArgs.StartedVertex">
            <summary>
            This property gets or sets the start vertex when the tracking shape action has been started.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWinformsMapEventArgs">
            <summary>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the overlays are drawn.
            </summary>
            <remarks>
            This is the event arguments for the OverlayDrawn event on the MapEngine class. It
            is raised after the overlays are drawn. This event allows you draw something
            with the canvas after the Layer draws.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWinformsMapEventArgs.#ctor">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </overloads>
            <returns>None</returns>
            <remarks>
            This is the default constructor. If you use this constructor then you need to set
            the required properties manually.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWinformsMapEventArgs.#ctor(ThinkGeo.MapSuite.DesktopEdition.Overlay,ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This is a constructor for the class.</summary>
            <overloads>
            This constructor allows you to set the overlay drawn, the world extent and
            the image you have drawn on.
            </overloads>
            <returns>None</returns>
            <remarks>None</remarks>
            <param name="overlay">This parameter is the overlay that has been drawn.</param>
            <param name="canvas">This parameter is the GeoCanvas that has been drawn on.</param>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWinformsMapEventArgs.Canvas">
            <summary>
            This property gets and sets the GeoCanvas we have drawn
            on.
            </summary>
            <value>This property gets the GeoCanvas we have drawn on.</value>
            <remarks>None</remarks>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.OverlayDrawnWinformsMapEventArgs.Overlay">
            <summary>This property gets and sets the overlay you have drawn.</summary>
            <value>This property gets the overlay you have drawn.</value>
            <remarks>None</remarks>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay">
            <summary>
            This class represents the Overlay used to display a Google Map.
            </summary>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.#ctor">
            <summary>
            This is the constructor of the class.
            </summary>
            <remarks>If you use this constructor, you have to set the properties manually before use, otherwise it will
            use their default values.</remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.#ctor(System.String,System.String,System.String)">
            <summary>
            This is the constructor the for the class.
            </summary>
            <param name="cacheDirectory">The cacheDirectory for the GoogleMapsOverlay.</param>
            <param name="clientId">The clientId for the GoogleMapsOverlay.</param>
            <param name="privateKey">The privateKey for the GoogleMapsOverlay.</param>
            <remarks>This constructor initializes a new layer and assgin a license key.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.#ctor(System.String,System.String,System.String,System.Net.WebProxy)">
            <summary>
            This is the constructor the for the class.
            </summary>
            <param name="cacheDirectory">The cacheDirectory for the GoogleMapsOverlay.</param>
            <param name="clientId">The clientId for the GoogleMapsOverlay.</param>
            <param name="privateKey">The privateKey for the GoogleMapsOverlay.</param>
            <remarks>This constructor initializes a new layer and assgin a license key.
            </remarks>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.GetPictureFormatString">
            <summary>
            This method gets a string that represents the picture format from Google Maps.
            </summary>
            <returns>Returns a string representing the picture format from GoogleMaps.</returns>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.DrawCore(ThinkGeo.MapSuite.Core.GeoCanvas)">
            <summary>This method draws the GoogleMapsOverlay.</summary>
            <remarks>
             This method draws the representation of the overlay based on the extent you provided.<br/>
            	<br/>
            When implementing this abstract method, consider each feature and its column data
            values. You can use the full power of the GeoCanvas to do the drawing. If you need
            column data for a feature, be sure to override the GetRequiredColumnNamesCore and add
            the columns you need to the collection. In many of the styles, we add properties that
            allow the user to specify which field they need; then, in the GetRequiredColumnNamesCore,
            we read that property and add it to the collection.
            </remarks>
            <returns>None</returns>
            <param name="canvas">This parameter is the canvas object or a GeoImage to draw on.</param>
        </member>
        <member name="M:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.Dispose">
            <summary>
            Releases the unmanaged resources.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.TimeoutInSeconds">
            <summary>
            Gets or sets a value represents the request timeout from the GoogleMaps server.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.PictureFormat">
            <summary>
            This property gets or sets the picture format that is returned from the Google service.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.MapType">
            <summary>
            This property gets or sets the map types available from Google Maps.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.ClientId">
            <summary>
            Gets or sets a value to access the special features of Google Maps API Premier, you must provide a client
            ID when accessing any of the Premier API libraries or services. When registering for
            Google Maps API Premier, you will receive this client ID from Google Enterprise Support.
            All client IDs begin with a gme- prefix.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.PrivateKey">
            <summary>
            Gets or sets a value that is unique to your client ID, please keep your key secure.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.CacheDirectory">
            <summary>
            This property gets or sets the tile cache directory.
            </summary>
        </member>
        <member name="P:ThinkGeo.MapSuite.DesktopEdition.GoogleMapsOverlay.WebProxy">
            <summary>
            This property gets or sets the proxy used for requesting a Web Response.
            </summary>
        </member>
        <member name="T:ThinkGeo.MapSuite.DesktopEdition.MapDoubleLeftClickMode">
            <summary>
            This enumeration specifies the behavior that occurs when double-left-clicking on the MapControl.
            The default value is ZoomIn.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapDoubleLeftClickMode.Default">
            <summary>
            Default value (ZoomIn) of the enumeration.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapDoubleLeftClickMode.ZoomIn">
            <summary>
            This enumeration item means that the map will ZoomIn when a double-left-click occurs.
            </summary>
        </member>
        <member name="F:ThinkGeo.MapSuite.DesktopEdition.MapDoubleLeftClickMode.Disabled">
            <summary>
            This enumeration item means that the ZoomIn functionality for double-left-clicks will be disabled.
            </summary>
        </member>
    </members>
</doc>
