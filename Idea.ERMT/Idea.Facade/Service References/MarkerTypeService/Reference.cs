//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idea.Facade.MarkerTypeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MarkerTypeService.IMarkerTypeService")]
    public interface IMarkerTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/GetAll", ReplyAction="http://tempuri.org/IMarkerTypeService/GetAllResponse")]
        Idea.Entities.MarkerType[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/GetAll", ReplyAction="http://tempuri.org/IMarkerTypeService/GetAllResponse")]
        System.Threading.Tasks.Task<Idea.Entities.MarkerType[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/Get", ReplyAction="http://tempuri.org/IMarkerTypeService/GetResponse")]
        Idea.Entities.MarkerType Get(int idMarkerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/Get", ReplyAction="http://tempuri.org/IMarkerTypeService/GetResponse")]
        System.Threading.Tasks.Task<Idea.Entities.MarkerType> GetAsync(int idMarkerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/Save", ReplyAction="http://tempuri.org/IMarkerTypeService/SaveResponse")]
        Idea.Entities.MarkerType Save(Idea.Entities.MarkerType markerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/Save", ReplyAction="http://tempuri.org/IMarkerTypeService/SaveResponse")]
        System.Threading.Tasks.Task<Idea.Entities.MarkerType> SaveAsync(Idea.Entities.MarkerType markerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/Delete", ReplyAction="http://tempuri.org/IMarkerTypeService/DeleteResponse")]
        void Delete(Idea.Entities.MarkerType markerType, bool deleteMarkerImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/Delete", ReplyAction="http://tempuri.org/IMarkerTypeService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Idea.Entities.MarkerType markerType, bool deleteMarkerImage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/GetByName", ReplyAction="http://tempuri.org/IMarkerTypeService/GetByNameResponse")]
        Idea.Entities.MarkerType[] GetByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMarkerTypeService/GetByName", ReplyAction="http://tempuri.org/IMarkerTypeService/GetByNameResponse")]
        System.Threading.Tasks.Task<Idea.Entities.MarkerType[]> GetByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarkerTypeServiceChannel : Idea.Facade.MarkerTypeService.IMarkerTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkerTypeServiceClient : System.ServiceModel.ClientBase<Idea.Facade.MarkerTypeService.IMarkerTypeService>, Idea.Facade.MarkerTypeService.IMarkerTypeService {
        
        public MarkerTypeServiceClient() {
        }
        
        public MarkerTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MarkerTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarkerTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarkerTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Idea.Entities.MarkerType[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.MarkerType[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Idea.Entities.MarkerType Get(int idMarkerType) {
            return base.Channel.Get(idMarkerType);
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.MarkerType> GetAsync(int idMarkerType) {
            return base.Channel.GetAsync(idMarkerType);
        }
        
        public Idea.Entities.MarkerType Save(Idea.Entities.MarkerType markerType) {
            return base.Channel.Save(markerType);
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.MarkerType> SaveAsync(Idea.Entities.MarkerType markerType) {
            return base.Channel.SaveAsync(markerType);
        }
        
        public void Delete(Idea.Entities.MarkerType markerType, bool deleteMarkerImage) {
            base.Channel.Delete(markerType, deleteMarkerImage);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Idea.Entities.MarkerType markerType, bool deleteMarkerImage) {
            return base.Channel.DeleteAsync(markerType, deleteMarkerImage);
        }
        
        public Idea.Entities.MarkerType[] GetByName(string name) {
            return base.Channel.GetByName(name);
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.MarkerType[]> GetByNameAsync(string name) {
            return base.Channel.GetByNameAsync(name);
        }
    }
}
