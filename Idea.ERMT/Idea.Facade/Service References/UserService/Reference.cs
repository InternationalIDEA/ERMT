//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idea.Facade.UserService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserService.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        Idea.Entities.User Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Login", ReplyAction="http://tempuri.org/IUserService/LoginResponse")]
        System.Threading.Tasks.Task<Idea.Entities.User> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Save", ReplyAction="http://tempuri.org/IUserService/SaveResponse")]
        void Save(Idea.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Save", ReplyAction="http://tempuri.org/IUserService/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync(Idea.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Validate", ReplyAction="http://tempuri.org/IUserService/ValidateResponse")]
        bool Validate(Idea.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Validate", ReplyAction="http://tempuri.org/IUserService/ValidateResponse")]
        System.Threading.Tasks.Task<bool> ValidateAsync(Idea.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAll", ReplyAction="http://tempuri.org/IUserService/GetAllResponse")]
        System.Collections.Generic.List<Idea.Entities.User> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAll", ReplyAction="http://tempuri.org/IUserService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.User>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        void Delete(Idea.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Delete", ReplyAction="http://tempuri.org/IUserService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Idea.Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByIDUser", ReplyAction="http://tempuri.org/IUserService/GetByIDUserResponse")]
        Idea.Entities.User GetByIDUser(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetByIDUser", ReplyAction="http://tempuri.org/IUserService/GetByIDUserResponse")]
        System.Threading.Tasks.Task<Idea.Entities.User> GetByIDUserAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Idea.Facade.UserService.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Idea.Facade.UserService.IUserService>, Idea.Facade.UserService.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Idea.Entities.User Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.User> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Save(Idea.Entities.User user) {
            base.Channel.Save(user);
        }
        
        public System.Threading.Tasks.Task SaveAsync(Idea.Entities.User user) {
            return base.Channel.SaveAsync(user);
        }
        
        public bool Validate(Idea.Entities.User user) {
            return base.Channel.Validate(user);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAsync(Idea.Entities.User user) {
            return base.Channel.ValidateAsync(user);
        }
        
        public System.Collections.Generic.List<Idea.Entities.User> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.User>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Delete(Idea.Entities.User user) {
            base.Channel.Delete(user);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Idea.Entities.User user) {
            return base.Channel.DeleteAsync(user);
        }
        
        public Idea.Entities.User GetByIDUser(int idUser) {
            return base.Channel.GetByIDUser(idUser);
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.User> GetByIDUserAsync(int idUser) {
            return base.Channel.GetByIDUserAsync(idUser);
        }
    }
}
