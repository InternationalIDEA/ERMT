//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idea.Facade.ModelFactorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ModelFactorService.IModelFactorService")]
    public interface IModelFactorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Validate", ReplyAction="http://tempuri.org/IModelFactorService/ValidateResponse")]
        bool Validate(Idea.Entities.ModelFactor modelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Validate", ReplyAction="http://tempuri.org/IModelFactorService/ValidateResponse")]
        System.Threading.Tasks.Task<bool> ValidateAsync(Idea.Entities.ModelFactor modelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Save", ReplyAction="http://tempuri.org/IModelFactorService/SaveResponse")]
        void Save(Idea.Entities.ModelFactor modelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Save", ReplyAction="http://tempuri.org/IModelFactorService/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync(Idea.Entities.ModelFactor modelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetAll", ReplyAction="http://tempuri.org/IModelFactorService/GetAllResponse")]
        System.Collections.Generic.List<Idea.Entities.ModelFactor> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetAll", ReplyAction="http://tempuri.org/IModelFactorService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetByModel", ReplyAction="http://tempuri.org/IModelFactorService/GetByModelResponse")]
        System.Collections.Generic.List<Idea.Entities.ModelFactor> GetByModel(int idModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetByModel", ReplyAction="http://tempuri.org/IModelFactorService/GetByModelResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetByModelAsync(int idModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Get", ReplyAction="http://tempuri.org/IModelFactorService/GetResponse")]
        Idea.Entities.ModelFactor Get(int idModelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Get", ReplyAction="http://tempuri.org/IModelFactorService/GetResponse")]
        System.Threading.Tasks.Task<Idea.Entities.ModelFactor> GetAsync(int idModelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetModelFactorWithDataAvailable", ReplyAction="http://tempuri.org/IModelFactorService/GetModelFactorWithDataAvailableResponse")]
        System.Collections.Generic.List<Idea.Entities.ModelFactor> GetModelFactorWithDataAvailable(int idModel, int idRegion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetModelFactorWithDataAvailable", ReplyAction="http://tempuri.org/IModelFactorService/GetModelFactorWithDataAvailableResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetModelFactorWithDataAvailableAsync(int idModel, int idRegion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetByModelAndFactorId", ReplyAction="http://tempuri.org/IModelFactorService/GetByModelAndFactorIdResponse")]
        System.Collections.Generic.List<Idea.Entities.ModelFactor> GetByModelAndFactorId(int idModel, int idFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/GetByModelAndFactorId", ReplyAction="http://tempuri.org/IModelFactorService/GetByModelAndFactorIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetByModelAndFactorIdAsync(int idModel, int idFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Delete", ReplyAction="http://tempuri.org/IModelFactorService/DeleteResponse")]
        void Delete(Idea.Entities.ModelFactor modelFactor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModelFactorService/Delete", ReplyAction="http://tempuri.org/IModelFactorService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Idea.Entities.ModelFactor modelFactor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModelFactorServiceChannel : Idea.Facade.ModelFactorService.IModelFactorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModelFactorServiceClient : System.ServiceModel.ClientBase<Idea.Facade.ModelFactorService.IModelFactorService>, Idea.Facade.ModelFactorService.IModelFactorService {
        
        public ModelFactorServiceClient() {
        }
        
        public ModelFactorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModelFactorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelFactorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModelFactorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Validate(Idea.Entities.ModelFactor modelFactor) {
            return base.Channel.Validate(modelFactor);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAsync(Idea.Entities.ModelFactor modelFactor) {
            return base.Channel.ValidateAsync(modelFactor);
        }
        
        public void Save(Idea.Entities.ModelFactor modelFactor) {
            base.Channel.Save(modelFactor);
        }
        
        public System.Threading.Tasks.Task SaveAsync(Idea.Entities.ModelFactor modelFactor) {
            return base.Channel.SaveAsync(modelFactor);
        }
        
        public System.Collections.Generic.List<Idea.Entities.ModelFactor> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Collections.Generic.List<Idea.Entities.ModelFactor> GetByModel(int idModel) {
            return base.Channel.GetByModel(idModel);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetByModelAsync(int idModel) {
            return base.Channel.GetByModelAsync(idModel);
        }
        
        public Idea.Entities.ModelFactor Get(int idModelFactor) {
            return base.Channel.Get(idModelFactor);
        }
        
        public System.Threading.Tasks.Task<Idea.Entities.ModelFactor> GetAsync(int idModelFactor) {
            return base.Channel.GetAsync(idModelFactor);
        }
        
        public System.Collections.Generic.List<Idea.Entities.ModelFactor> GetModelFactorWithDataAvailable(int idModel, int idRegion) {
            return base.Channel.GetModelFactorWithDataAvailable(idModel, idRegion);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetModelFactorWithDataAvailableAsync(int idModel, int idRegion) {
            return base.Channel.GetModelFactorWithDataAvailableAsync(idModel, idRegion);
        }
        
        public System.Collections.Generic.List<Idea.Entities.ModelFactor> GetByModelAndFactorId(int idModel, int idFactor) {
            return base.Channel.GetByModelAndFactorId(idModel, idFactor);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Idea.Entities.ModelFactor>> GetByModelAndFactorIdAsync(int idModel, int idFactor) {
            return base.Channel.GetByModelAndFactorIdAsync(idModel, idFactor);
        }
        
        public void Delete(Idea.Entities.ModelFactor modelFactor) {
            base.Channel.Delete(modelFactor);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Idea.Entities.ModelFactor modelFactor) {
            return base.Channel.DeleteAsync(modelFactor);
        }
    }
}
